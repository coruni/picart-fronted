// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type Composable,
  type TDataShape,
  type Client,
  formDataBodySerializer,
  urlSearchParamsBodySerializer
} from './client';
import type {
  AppControllerGetHelloData,
  RoleControllerFindAllData,
  RoleControllerFindAllResponse,
  RoleControllerCreateData,
  RoleControllerCreateResponse,
  RoleControllerRemoveData,
  RoleControllerFindOneData,
  RoleControllerFindOneResponse,
  RoleControllerUpdateData,
  RoleControllerUpdateResponse,
  ConfigControllerFindAllData,
  ConfigControllerFindAllResponse,
  ConfigControllerUpdateAllData,
  ConfigControllerCreateData,
  ConfigControllerRemoveData,
  ConfigControllerFindOneData,
  ConfigControllerUpdateData,
  ConfigControllerFindByGroupData,
  ConfigControllerUpdateGroupData,
  ConfigControllerFindByKeyData,
  ConfigControllerUpdateByKeyData,
  ConfigControllerGetSystemInfoData,
  ConfigControllerGetPublicData,
  ConfigControllerGetPublicResponse,
  UserControllerFindAllData,
  UserControllerFindAllResponse,
  UserControllerCreateData,
  UserControllerRemoveData,
  UserControllerFindOneData,
  UserControllerUpdateData,
  UserControllerGetProfileData,
  UserControllerGetProfileResponse,
  UserControllerGetFollowerCountData,
  UserControllerGetFollowingCountData,
  UserControllerGetFollowersData,
  UserControllerGetFollowingsData,
  UserControllerGetUserCommissionConfigData,
  UserControllerSetUserCommissionConfigData,
  UserControllerGetWalletData,
  UserControllerLoginData,
  UserControllerLoginResponse,
  UserControllerRegisterUserData,
  UserControllerRegisterUserResponse,
  UserControllerRefreshTokenData,
  UserControllerLogoutData,
  UserControllerFollowData,
  UserControllerUnfollowData,
  UserControllerCalculateCommissionData,
  UserControllerRechargeWalletData,
  UserControllerWithdrawWalletData,
  UserControllerSendVerificationCodeData,
  ArticleControllerFindAllData,
  ArticleControllerFindAllResponse,
  ArticleControllerCreateData,
  ArticleControllerRemoveData,
  ArticleControllerFindOneData,
  ArticleControllerFindOneResponse,
  ArticleControllerUpdateData,
  ArticleControllerGetLikeStatusData,
  ArticleControllerGetLikeCountData,
  ArticleControllerArticleSearchData,
  ArticleControllerArticleSearchResponse,
  ArticleControllerFindRecommendData,
  ArticleControllerFindRecommendResponse,
  ArticleControllerFindArticleByAuthorData,
  ArticleControllerFindArticleByAuthorResponse,
  ArticleControllerLikeData,
  CommentControllerFindAllData,
  CommentControllerRemoveData,
  CommentControllerRemoveResponse,
  CommentControllerFindOneData,
  CommentControllerUpdateData,
  CommentControllerGetRepliesData,
  CommentControllerGetRepliesResponse,
  CommentControllerGetUserCommentsData,
  CommentControllerGetUserCommentsResponse,
  CommentControllerGetCommentCountData,
  CommentControllerLikeData,
  CommentControllerCreateData,
  TagControllerFindAllData,
  TagControllerFindAllResponse,
  TagControllerCreateData,
  TagControllerCreateResponse,
  TagControllerRemoveData,
  TagControllerFindOneData,
  TagControllerFindOneResponse,
  TagControllerUpdateData,
  TagControllerUnfollowData,
  TagControllerFollowData,
  CategoryControllerFindAllData,
  CategoryControllerFindAllResponse,
  CategoryControllerCreateData,
  CategoryControllerRemoveData,
  CategoryControllerFindOneData,
  CategoryControllerFindOneResponse,
  CategoryControllerUpdateData,
  PermissionControllerFindAllData,
  PermissionControllerFindAllResponse,
  PermissionControllerCreateData,
  PermissionControllerCreateResponse,
  PermissionControllerRemoveData,
  PermissionControllerFindOneData,
  PermissionControllerFindOneResponse,
  PermissionControllerUpdateData,
  PermissionControllerUpdateResponse,
  OrderControllerGetUserOrdersData,
  OrderControllerFindOneData,
  OrderControllerFindByOrderNoData,
  OrderControllerGetWalletBalanceData,
  OrderControllerGetUserOrders2Data,
  OrderControllerCreateOrderData,
  OrderControllerGetPendingOrdersData,
  OrderControllerCancelOrderData,
  OrderControllerCreatePaymentOrderData,
  OrderControllerRequestRefundData,
  OrderControllerCreateArticleOrderData,
  OrderControllerCreateMembershipOrderData,
  InviteControllerGetMyInvitesData,
  InviteControllerGetInviteStatsData,
  InviteControllerGetMyInviteEarningsData,
  InviteControllerGetInviteDetailData,
  InviteControllerUseInviteData,
  InviteControllerCreateInviteData,
  UploadControllerGetFileInfoData,
  UploadControllerGetFileInfoResponse,
  UploadControllerFindAllData,
  UploadControllerFindAllResponse,
  UploadControllerUploadFileData,
  UploadControllerUploadFileResponse,
  UploadControllerRemoveData,
  MessageControllerFindAllData,
  MessageControllerCreateData,
  MessageControllerRemoveData,
  MessageControllerFindOneData,
  MessageControllerUpdateData,
  MessageControllerMarkAsReadData,
  BannersControllerFindAllData,
  BannersControllerFindAllResponse,
  BannersControllerCreateData,
  BannersControllerCreateResponse,
  BannersControllerFindActiveData,
  BannersControllerFindActiveResponse,
  BannersControllerDeleteByIdData,
  BannersControllerDeleteByIdResponse,
  BannersControllerDetailData,
  BannersControllerDetailResponse,
  BannersControllerUpdateData,
  BannersControllerUpdateResponse,
  PostPayCreateData,
  PostPayCreateResponse,
  GetPayOrderStatusData,
  GetPayOrderStatusResponse,
  PostPayNotifyByPaywayData,
  PostPayNotifyByPaywayResponse,
  PaymentControllerCreatePaymentData,
  PaymentControllerAlipayNotifyData,
  PaymentControllerWechatNotifyData,
  PaymentControllerFindPaymentRecordData,
  PaymentControllerFindPaymentByOrderIdData,
  PaymentControllerFindUserPaymentsData,
  PaymentControllerSimulatePaymentSuccessData
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TComposable extends Composable,
  TData extends TDataShape = TDataShape,
  ResT = unknown,
  DefaultT = undefined
> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * AppController_getHello
 */
export const appControllerGetHello = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AppControllerGetHelloData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/',
    ...options
  });
};

/**
 * 获取所有角色
 */
export const roleControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends RoleControllerFindAllResponse = RoleControllerFindAllResponse
>(
  options: Options<TComposable, RoleControllerFindAllData, RoleControllerFindAllResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    RoleControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/role',
    ...options
  });
};

/**
 * 创建角色
 */
export const roleControllerCreate = <
  TComposable extends Composable,
  DefaultT extends RoleControllerCreateResponse = RoleControllerCreateResponse
>(
  options: Options<TComposable, RoleControllerCreateData, RoleControllerCreateResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    RoleControllerCreateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/role',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 删除角色
 */
export const roleControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, RoleControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/role/{id}',
    ...options
  });
};

/**
 * 根据ID获取角色
 */
export const roleControllerFindOne = <
  TComposable extends Composable,
  DefaultT extends RoleControllerFindOneResponse = RoleControllerFindOneResponse
>(
  options: Options<TComposable, RoleControllerFindOneData, RoleControllerFindOneResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    RoleControllerFindOneResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/role/{id}',
    ...options
  });
};

/**
 * 更新角色
 */
export const roleControllerUpdate = <
  TComposable extends Composable,
  DefaultT extends RoleControllerUpdateResponse = RoleControllerUpdateResponse
>(
  options: Options<TComposable, RoleControllerUpdateData, RoleControllerUpdateResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    RoleControllerUpdateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/role/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 获取所有配置
 */
export const configControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends ConfigControllerFindAllResponse = ConfigControllerFindAllResponse
>(
  options: Options<
    TComposable,
    ConfigControllerFindAllData,
    ConfigControllerFindAllResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ConfigControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config',
    ...options
  });
};

/**
 * 更新所有配置
 */
export const configControllerUpdateAll = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerUpdateAllData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 创建配置
 */
export const configControllerCreate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerCreateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/config',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 删除配置
 */
export const configControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config/{id}',
    ...options
  });
};

/**
 * 获取配置详情
 */
export const configControllerFindOne = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerFindOneData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/config/{id}',
    ...options
  });
};

/**
 * 更新配置
 */
export const configControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 根据分组获取配置
 */
export const configControllerFindByGroup = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerFindByGroupData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/config/group/{group}',
    ...options
  });
};

/**
 * 更新分组配置
 */
export const configControllerUpdateGroup = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerUpdateGroupData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config/group/{group}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 根据键获取配置
 */
export const configControllerFindByKey = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerFindByKeyData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/config/key/{key}',
    ...options
  });
};

/**
 * 根据键更新配置
 */
export const configControllerUpdateByKey = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerUpdateByKeyData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config/key/{key}',
    ...options
  });
};

/**
 * 获取系统信息
 */
export const configControllerGetSystemInfo = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ConfigControllerGetSystemInfoData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/config/system/info',
    ...options
  });
};

/**
 * 获取公共配置
 */
export const configControllerGetPublic = <
  TComposable extends Composable,
  DefaultT extends ConfigControllerGetPublicResponse = ConfigControllerGetPublicResponse
>(
  options: Options<
    TComposable,
    ConfigControllerGetPublicData,
    ConfigControllerGetPublicResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ConfigControllerGetPublicResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/config/public',
    ...options
  });
};

/**
 * 获取用户列表
 */
export const userControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends UserControllerFindAllResponse = UserControllerFindAllResponse
>(
  options: Options<TComposable, UserControllerFindAllData, UserControllerFindAllResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    UserControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user',
    ...options
  });
};

/**
 * 创建用户
 */
export const userControllerCreate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerCreateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 删除用户
 */
export const userControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/{id}',
    ...options
  });
};

/**
 * 获取用户详情
 */
export const userControllerFindOne = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerFindOneData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/{id}',
    ...options
  });
};

/**
 * 更新用户
 */
export const userControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 获取当前用户信息
 */
export const userControllerGetProfile = <
  TComposable extends Composable,
  DefaultT extends UserControllerGetProfileResponse = UserControllerGetProfileResponse
>(
  options: Options<
    TComposable,
    UserControllerGetProfileData,
    UserControllerGetProfileResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    UserControllerGetProfileResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/profile',
    ...options
  });
};

/**
 * 获取粉丝数量
 */
export const userControllerGetFollowerCount = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, UserControllerGetFollowerCountData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/{id}/followers/count',
    ...options
  });
};

/**
 * 获取关注数量
 */
export const userControllerGetFollowingCount = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, UserControllerGetFollowingCountData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/{id}/followings/count',
    ...options
  });
};

/**
 * 获取粉丝列表
 */
export const userControllerGetFollowers = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerGetFollowersData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/{id}/followers',
    ...options
  });
};

/**
 * 获取关注列表
 */
export const userControllerGetFollowings = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerGetFollowingsData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/{id}/followings',
    ...options
  });
};

/**
 * 获取当前用户抽成配置
 */
export const userControllerGetUserCommissionConfig = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, UserControllerGetUserCommissionConfigData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/commission/config',
    ...options
  });
};

/**
 * 设置用户抽成配置
 */
export const userControllerSetUserCommissionConfig = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, UserControllerSetUserCommissionConfigData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/commission/config',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 获取用户钱包信息
 */
export const userControllerGetWallet = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerGetWalletData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/user/wallet',
    ...options
  });
};

/**
 * 用户登录
 */
export const userControllerLogin = <
  TComposable extends Composable,
  DefaultT extends UserControllerLoginResponse = UserControllerLoginResponse
>(
  options: Options<TComposable, UserControllerLoginData, UserControllerLoginResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    UserControllerLoginResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 用户注册
 */
export const userControllerRegisterUser = <
  TComposable extends Composable,
  DefaultT extends UserControllerRegisterUserResponse = UserControllerRegisterUserResponse
>(
  options: Options<
    TComposable,
    UserControllerRegisterUserData,
    UserControllerRegisterUserResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    UserControllerRegisterUserResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 刷新 access token
 */
export const userControllerRefreshToken = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerRefreshTokenData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/refresh-token',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 退出登录（单设备）
 */
export const userControllerLogout = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerLogoutData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/logout',
      ...options
    }
  );
};

/**
 * 关注用户
 */
export const userControllerFollow = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerFollowData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/{id}/follow',
      ...options
    }
  );
};

/**
 * 取关用户
 */
export const userControllerUnfollow = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerUnfollowData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/{id}/unfollow',
      ...options
    }
  );
};

/**
 * 计算抽成金额
 */
export const userControllerCalculateCommission = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, UserControllerCalculateCommissionData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/commission/calculate',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 钱包充值
 */
export const userControllerRechargeWallet = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerRechargeWalletData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/wallet/recharge',
      ...options
    }
  );
};

/**
 * 钱包提现
 */
export const userControllerWithdrawWallet = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UserControllerWithdrawWalletData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/wallet/withdraw',
      ...options
    }
  );
};

/**
 * 发送邮箱验证码
 */
export const userControllerSendVerificationCode = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, UserControllerSendVerificationCodeData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/user/email/verification',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 获取文章列表
 */
export const articleControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends ArticleControllerFindAllResponse = ArticleControllerFindAllResponse
>(
  options: Options<
    TComposable,
    ArticleControllerFindAllData,
    ArticleControllerFindAllResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ArticleControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article',
    ...options
  });
};

/**
 * 创建文章
 */
export const articleControllerCreate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ArticleControllerCreateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/article',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 删除文章
 */
export const articleControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ArticleControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article/{id}',
    ...options
  });
};

/**
 * 获取文章详情
 */
export const articleControllerFindOne = <
  TComposable extends Composable,
  DefaultT extends ArticleControllerFindOneResponse = ArticleControllerFindOneResponse
>(
  options: Options<
    TComposable,
    ArticleControllerFindOneData,
    ArticleControllerFindOneResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ArticleControllerFindOneResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article/{id}',
    ...options
  });
};

/**
 * 更新文章
 */
export const articleControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ArticleControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 获取文章点赞状态
 */
export const articleControllerGetLikeStatus = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, ArticleControllerGetLikeStatusData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/article/{id}/like/status',
    ...options
  });
};

/**
 * 获取文章点赞数量
 */
export const articleControllerGetLikeCount = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ArticleControllerGetLikeCountData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/article/{id}/like/count',
    ...options
  });
};

/**
 * 搜索文章列表
 */
export const articleControllerArticleSearch = <
  TComposable extends Composable,
  DefaultT extends ArticleControllerArticleSearchResponse = ArticleControllerArticleSearchResponse
>(
  options: Options<
    TComposable,
    ArticleControllerArticleSearchData,
    ArticleControllerArticleSearchResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ArticleControllerArticleSearchResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article/search',
    ...options
  });
};

/**
 * 获取相关推荐
 */
export const articleControllerFindRecommend = <
  TComposable extends Composable,
  DefaultT extends ArticleControllerFindRecommendResponse = ArticleControllerFindRecommendResponse
>(
  options: Options<
    TComposable,
    ArticleControllerFindRecommendData,
    ArticleControllerFindRecommendResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ArticleControllerFindRecommendResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article/recommend/{id}',
    ...options
  });
};

/**
 * 获取用户文章
 */
export const articleControllerFindArticleByAuthor = <
  TComposable extends Composable,
  DefaultT extends
    ArticleControllerFindArticleByAuthorResponse = ArticleControllerFindArticleByAuthorResponse
>(
  options: Options<
    TComposable,
    ArticleControllerFindArticleByAuthorData,
    ArticleControllerFindArticleByAuthorResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ArticleControllerFindArticleByAuthorResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/article/author/{id}',
    ...options
  });
};

/**
 * 点赞/表情回复文章
 */
export const articleControllerLike = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, ArticleControllerLikeData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/article/{id}/like',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 获取文章评论列表
 */
export const commentControllerFindAll = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CommentControllerFindAllData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/comments/article/{id}',
    ...options
  });
};

/**
 * 删除评论
 */
export const commentControllerRemove = <
  TComposable extends Composable,
  DefaultT extends CommentControllerRemoveResponse = CommentControllerRemoveResponse
>(
  options: Options<
    TComposable,
    CommentControllerRemoveData,
    CommentControllerRemoveResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    CommentControllerRemoveResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/comments/{id}',
    ...options
  });
};

/**
 * 获取评论详情
 */
export const commentControllerFindOne = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CommentControllerFindOneData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/comments/{id}',
    ...options
  });
};

/**
 * 更新评论
 */
export const commentControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CommentControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/comments/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 获取评论回复列表
 */
export const commentControllerGetReplies = <
  TComposable extends Composable,
  DefaultT extends CommentControllerGetRepliesResponse = CommentControllerGetRepliesResponse
>(
  options: Options<
    TComposable,
    CommentControllerGetRepliesData,
    CommentControllerGetRepliesResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    CommentControllerGetRepliesResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/comments/{id}/replies',
    ...options
  });
};

/**
 * 获取用户评论列表
 */
export const commentControllerGetUserComments = <
  TComposable extends Composable,
  DefaultT extends
    CommentControllerGetUserCommentsResponse = CommentControllerGetUserCommentsResponse
>(
  options: Options<
    TComposable,
    CommentControllerGetUserCommentsData,
    CommentControllerGetUserCommentsResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    CommentControllerGetUserCommentsResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/comments/user/{userId}',
    ...options
  });
};

/**
 * 获取文章评论数量
 */
export const commentControllerGetCommentCount = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, CommentControllerGetCommentCountData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/comments/article/{id}/count',
    ...options
  });
};

/**
 * 点赞评论
 */
export const commentControllerLike = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CommentControllerLikeData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/comments/{id}/like',
      ...options
    }
  );
};

/**
 * 创建评论
 */
export const commentControllerCreate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CommentControllerCreateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/comments',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 获取所有标签
 */
export const tagControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends TagControllerFindAllResponse = TagControllerFindAllResponse
>(
  options: Options<TComposable, TagControllerFindAllData, TagControllerFindAllResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    TagControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/tag',
    ...options
  });
};

/**
 * 创建标签
 */
export const tagControllerCreate = <
  TComposable extends Composable,
  DefaultT extends TagControllerCreateResponse = TagControllerCreateResponse
>(
  options: Options<TComposable, TagControllerCreateData, TagControllerCreateResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    TagControllerCreateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/tag',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 删除标签
 */
export const tagControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, TagControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/tag/{id}',
    ...options
  });
};

/**
 * 获取标签详情
 */
export const tagControllerFindOne = <
  TComposable extends Composable,
  DefaultT extends TagControllerFindOneResponse = TagControllerFindOneResponse
>(
  options: Options<TComposable, TagControllerFindOneData, TagControllerFindOneResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    TagControllerFindOneResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/tag/{id}',
    ...options
  });
};

/**
 * 更新标签
 */
export const tagControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, TagControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/tag/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 取消关注标签
 */
export const tagControllerUnfollow = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, TagControllerUnfollowData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/tag/{id}/follow',
    ...options
  });
};

/**
 * 关注标签
 */
export const tagControllerFollow = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, TagControllerFollowData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/tag/{id}/follow',
      ...options
    }
  );
};

/**
 * 获取所有分类
 */
export const categoryControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends CategoryControllerFindAllResponse = CategoryControllerFindAllResponse
>(
  options: Options<
    TComposable,
    CategoryControllerFindAllData,
    CategoryControllerFindAllResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    CategoryControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/category',
    ...options
  });
};

/**
 * 创建分类
 */
export const categoryControllerCreate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CategoryControllerCreateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/category',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 删除分类
 */
export const categoryControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CategoryControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/category/{id}',
    ...options
  });
};

/**
 * 获取分类详情
 */
export const categoryControllerFindOne = <
  TComposable extends Composable,
  DefaultT extends CategoryControllerFindOneResponse = CategoryControllerFindOneResponse
>(
  options: Options<
    TComposable,
    CategoryControllerFindOneData,
    CategoryControllerFindOneResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    CategoryControllerFindOneResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/category/{id}',
    ...options
  });
};

/**
 * 更新分类
 */
export const categoryControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, CategoryControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/category/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 获取所有权限
 */
export const permissionControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends PermissionControllerFindAllResponse = PermissionControllerFindAllResponse
>(
  options: Options<
    TComposable,
    PermissionControllerFindAllData,
    PermissionControllerFindAllResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PermissionControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/permission',
    ...options
  });
};

/**
 * 创建权限
 */
export const permissionControllerCreate = <
  TComposable extends Composable,
  DefaultT extends PermissionControllerCreateResponse = PermissionControllerCreateResponse
>(
  options: Options<
    TComposable,
    PermissionControllerCreateData,
    PermissionControllerCreateResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PermissionControllerCreateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/permission',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 删除权限
 */
export const permissionControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, PermissionControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/permission/{id}',
    ...options
  });
};

/**
 * 根据ID获取权限
 */
export const permissionControllerFindOne = <
  TComposable extends Composable,
  DefaultT extends PermissionControllerFindOneResponse = PermissionControllerFindOneResponse
>(
  options: Options<
    TComposable,
    PermissionControllerFindOneData,
    PermissionControllerFindOneResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PermissionControllerFindOneResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/permission/{id}',
    ...options
  });
};

/**
 * 更新权限
 */
export const permissionControllerUpdate = <
  TComposable extends Composable,
  DefaultT extends PermissionControllerUpdateResponse = PermissionControllerUpdateResponse
>(
  options: Options<
    TComposable,
    PermissionControllerUpdateData,
    PermissionControllerUpdateResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    PermissionControllerUpdateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/permission/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 获取用户订单列表
 */
export const orderControllerGetUserOrders = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerGetUserOrdersData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/order/list',
    ...options
  });
};

/**
 * 获取订单详情
 */
export const orderControllerFindOne = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerFindOneData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/{id}',
    ...options
  });
};

/**
 * 根据订单号获取订单
 */
export const orderControllerFindByOrderNo = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerFindByOrderNoData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/no/{orderNo}',
    ...options
  });
};

/**
 * 获取钱包余额
 */
export const orderControllerGetWalletBalance = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, OrderControllerGetWalletBalanceData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/wallet/balance',
    ...options
  });
};

/**
 * 获取用户订单列表
 */
export const orderControllerGetUserOrders2 = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerGetUserOrders2Data, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order',
    ...options
  });
};

/**
 * 创建订单（包含抽成计算）
 */
export const orderControllerCreateOrder = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerCreateOrderData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/order',
      ...options
    }
  );
};

/**
 * 获取待支付订单
 */
export const orderControllerGetPendingOrders = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, OrderControllerGetPendingOrdersData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/pending',
    ...options
  });
};

/**
 * 取消订单
 */
export const orderControllerCancelOrder = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerCancelOrderData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/{id}/cancel',
    ...options
  });
};

/**
 * 创建支付订单
 */
export const orderControllerCreatePaymentOrder = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, OrderControllerCreatePaymentOrderData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/order/payment',
      ...options
    }
  );
};

/**
 * 申请退款
 */
export const orderControllerRequestRefund = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, OrderControllerRequestRefundData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/order/{id}/refund',
      ...options
    }
  );
};

/**
 * 创建文章订单
 */
export const orderControllerCreateArticleOrder = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, OrderControllerCreateArticleOrderData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/order/article',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 创建会员充值订单
 */
export const orderControllerCreateMembershipOrder = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, OrderControllerCreateMembershipOrderData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/order/membership',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 获取我的邀请列表
 */
export const inviteControllerGetMyInvites = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, InviteControllerGetMyInvitesData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/invite/my',
    ...options
  });
};

/**
 * 获取邀请统计信息
 */
export const inviteControllerGetInviteStats = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, InviteControllerGetInviteStatsData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/invite/stats',
    ...options
  });
};

/**
 * 获取邀请收益记录
 */
export const inviteControllerGetMyInviteEarnings = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, InviteControllerGetMyInviteEarningsData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/invite/earnings',
    ...options
  });
};

/**
 * 获取邀请详情
 */
export const inviteControllerGetInviteDetail = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, InviteControllerGetInviteDetailData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/invite/{id}',
    ...options
  });
};

/**
 * 使用邀请码
 */
export const inviteControllerUseInvite = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, InviteControllerUseInviteData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/invite/use',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 创建邀请码
 */
export const inviteControllerCreateInvite = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, InviteControllerCreateInviteData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/invite',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 获取文件信息
 */
export const uploadControllerGetFileInfo = <
  TComposable extends Composable,
  DefaultT extends UploadControllerGetFileInfoResponse = UploadControllerGetFileInfoResponse
>(
  options: Options<
    TComposable,
    UploadControllerGetFileInfoData,
    UploadControllerGetFileInfoResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    UploadControllerGetFileInfoResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/upload/info/{id}',
    ...options
  });
};

/**
 * 获取所有上传文件
 */
export const uploadControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends UploadControllerFindAllResponse = UploadControllerFindAllResponse
>(
  options: Options<
    TComposable,
    UploadControllerFindAllData,
    UploadControllerFindAllResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    UploadControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/upload',
    ...options
  });
};

/**
 * 上传文件
 */
export const uploadControllerUploadFile = <
  TComposable extends Composable,
  DefaultT extends UploadControllerUploadFileResponse = UploadControllerUploadFileResponse
>(
  options: Options<
    TComposable,
    UploadControllerUploadFileData,
    UploadControllerUploadFileResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    UploadControllerUploadFileResponse | DefaultT,
    unknown,
    DefaultT
  >({
    ...formDataBodySerializer,
    url: '/upload/file',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers
    }
  });
};

/**
 * 删除文件
 */
export const uploadControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, UploadControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/upload/{id}',
    ...options
  });
};

/**
 * 获取当前用户所有消息（含全员通知）
 */
export const messageControllerFindAll = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, MessageControllerFindAllData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/message',
    ...options
  });
};

/**
 * 创建消息（支持全员、部分、个人通知）
 */
export const messageControllerCreate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, MessageControllerCreateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/message',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 删除消息
 */
export const messageControllerRemove = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, MessageControllerRemoveData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/message/{id}',
    ...options
  });
};

/**
 * 获取单条消息
 */
export const messageControllerFindOne = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, MessageControllerFindOneData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    url: '/message/{id}',
    ...options
  });
};

/**
 * 更新消息内容
 */
export const messageControllerUpdate = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, MessageControllerUpdateData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/message/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
};

/**
 * 标记消息为已读
 */
export const messageControllerMarkAsRead = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, MessageControllerMarkAsReadData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/message/{id}/read',
      ...options
    }
  );
};

/**
 * 轮播列表
 */
export const bannersControllerFindAll = <
  TComposable extends Composable,
  DefaultT extends BannersControllerFindAllResponse = BannersControllerFindAllResponse
>(
  options: Options<
    TComposable,
    BannersControllerFindAllData,
    BannersControllerFindAllResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    BannersControllerFindAllResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/banners',
    ...options
  });
};

/**
 * 创建轮播
 */
export const bannersControllerCreate = <
  TComposable extends Composable,
  DefaultT extends BannersControllerCreateResponse = BannersControllerCreateResponse
>(
  options: Options<
    TComposable,
    BannersControllerCreateData,
    BannersControllerCreateResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    BannersControllerCreateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    ...urlSearchParamsBodySerializer,
    url: '/banners',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers
    }
  });
};

/**
 * 轮播活动列表
 */
export const bannersControllerFindActive = <
  TComposable extends Composable,
  DefaultT extends BannersControllerFindActiveResponse = BannersControllerFindActiveResponse
>(
  options: Options<
    TComposable,
    BannersControllerFindActiveData,
    BannersControllerFindActiveResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    BannersControllerFindActiveResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/banners/active',
    ...options
  });
};

/**
 * 删除轮播
 */
export const bannersControllerDeleteById = <
  TComposable extends Composable,
  DefaultT extends BannersControllerDeleteByIdResponse = BannersControllerDeleteByIdResponse
>(
  options: Options<
    TComposable,
    BannersControllerDeleteByIdData,
    BannersControllerDeleteByIdResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    BannersControllerDeleteByIdResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/banners/{id}',
    ...options
  });
};

/**
 * 轮播详情
 */
export const bannersControllerDetail = <
  TComposable extends Composable,
  DefaultT extends BannersControllerDetailResponse = BannersControllerDetailResponse
>(
  options: Options<
    TComposable,
    BannersControllerDetailData,
    BannersControllerDetailResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    BannersControllerDetailResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/banners/{id}',
    ...options
  });
};

/**
 * 更新轮播
 */
export const bannersControllerUpdate = <
  TComposable extends Composable,
  DefaultT extends BannersControllerUpdateResponse = BannersControllerUpdateResponse
>(
  options: Options<
    TComposable,
    BannersControllerUpdateData,
    BannersControllerUpdateResponse,
    DefaultT
  >
) => {
  return (options.client ?? _heyApiClient).patch<
    TComposable,
    BannersControllerUpdateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    ...urlSearchParamsBodySerializer,
    url: '/banners/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers
    }
  });
};

/**
 * 创建支付订单
 */
export const postPayCreate = <
  TComposable extends Composable,
  DefaultT extends PostPayCreateResponse = PostPayCreateResponse
>(
  options: Options<TComposable, PostPayCreateData, PostPayCreateResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PostPayCreateResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/pay/create',
    ...options
  });
};

/**
 * 查询订单状态
 */
export const getPayOrderStatus = <
  TComposable extends Composable,
  DefaultT extends GetPayOrderStatusResponse = GetPayOrderStatusResponse
>(
  options: Options<TComposable, GetPayOrderStatusData, GetPayOrderStatusResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    GetPayOrderStatusResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/pay/orderStatus',
    ...options
  });
};

/**
 * 订单异步通知
 */
export const postPayNotifyByPayway = <
  TComposable extends Composable,
  DefaultT extends PostPayNotifyByPaywayResponse = PostPayNotifyByPaywayResponse
>(
  options: Options<TComposable, PostPayNotifyByPaywayData, PostPayNotifyByPaywayResponse, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PostPayNotifyByPaywayResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/pay/notify/{payway}',
    ...options
  });
};

/**
 * 创建支付
 */
export const paymentControllerCreatePayment = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, PaymentControllerCreatePaymentData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/payment/create',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 支付宝支付回调
 */
export const paymentControllerAlipayNotify = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, PaymentControllerAlipayNotifyData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/payment/notify/alipay',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 微信支付回调
 */
export const paymentControllerWechatNotify = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, PaymentControllerWechatNotifyData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/payment/notify/wechat',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }
  );
};

/**
 * 查询支付记录
 */
export const paymentControllerFindPaymentRecord = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, PaymentControllerFindPaymentRecordData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/payment/record/{id}',
    ...options
  });
};

/**
 * 查询订单支付记录
 */
export const paymentControllerFindPaymentByOrderId = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, PaymentControllerFindPaymentByOrderIdData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/payment/order/{orderId}',
    ...options
  });
};

/**
 * 查询用户支付记录
 */
export const paymentControllerFindUserPayments = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, PaymentControllerFindUserPaymentsData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/payment/user',
    ...options
  });
};

/**
 * 模拟支付成功（仅用于测试）
 */
export const paymentControllerSimulatePaymentSuccess = <
  TComposable extends Composable,
  DefaultT = undefined
>(
  options: Options<TComposable, PaymentControllerSimulatePaymentSuccessData, unknown, DefaultT>
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/payment/simulate/{id}/success',
      ...options
    }
  );
};
