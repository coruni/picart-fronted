// This file is auto-generated by @hey-api/openapi-ts

export type CreateRoleDto = {
  /**
   * 角色名称
   */
  name: string;
  /**
   * 角色描述
   */
  description: string;
  /**
   * 权限ID列表
   */
  permissionIds?: Array<string>;
};

export type CreatePermissionDto = {
  /**
   * 权限名称
   */
  name: string;
  /**
   * 权限描述
   */
  description: string;
};

export type UpdateRoleDto = {
  /**
   * 角色名称
   */
  name?: string;
  /**
   * 角色描述
   */
  description?: string;
  /**
   * 权限ID列表
   */
  permissionIds?: Array<number>;
};

export type Permission = {
  [key: string]: unknown;
};

/**
 * Contains the metadata for a custom table.
 */
export type CustomFormMetadataModel = {
  /**
   * The custom table's display order.
   */
  displayOrder?: number;
  fields?: Array<CustomFormField>;
  /**
   * The custom table id.
   */
  id?: string;
  /**
   * The custom table name.
   */
  text?: string;
};

export type CreateConfigDto = {
  [key: string]: unknown;
};

export type UpdatePermissionDto = {
  /**
   * 权限名称
   */
  name?: string;
  /**
   * 权限描述
   */
  description?: string;
};

export type CustomFormField = {
  displayOrder?: number;
  drillDown?: ASiTableDrill;
  /**
   * The custom field data type.
   */
  fieldType?: string;
  /**
   * The custom field system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * Indicates whether or not the custom field is read-only.
   */
  isReadonly?: 'Y' | 'N';
  /**
   * Indicates whether or not the custom field is required.
   */
  isRequired?: 'Y' | 'N';
  /**
   * The custom field length
   */
  maxLength?: number;
  options?: Array<{
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  }>;
  /**
   * The custom field localized text.
   */
  text?: string;
  /**
   * The custom field stored value.
   */
  value?: string;
};

export type UpdateConfigDto = {
  [key: string]: unknown;
};

export type ResponseCustomFormSubgroupModelArray = {
  result?: Array<CustomFormSubgroupModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type LoginDto = {
  /**
   * 用户名
   */
  username: string;
  /**
   * 密码
   */
  password: string;
};

export type Role = {
  [key: string]: unknown;
};

export type CustomFormSubgroupModel = {
  /**
   * The custom form subgroup display order.
   */
  displayOrder?: number;
  fields?: Array<CustomFormField>;
  /**
   * The custom form subgroup system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The custom form subgroup name.
   */
  text?: string;
};

export type CreateUserDto = {
  /**
   * 用户名
   */
  username: string;
  /**
   * 密码
   */
  password: string;
  /**
   * 昵称
   */
  nickname?: string;
  /**
   * 头像
   */
  avatar?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 手机号
   */
  phone?: string;
  /**
   * 角色ID列表（仅超级管理员可指定）
   */
  roleIds?: Array<number>;
  /**
   * 钱包余额
   */
  wallet?: number;
  /**
   * 邀请码
   */
  inviteCode?: string;
  /**
   * 邮箱验证码
   */
  verificationCode?: string;
};

export type ASiTableDrill = {
  children?: Array<ChildDrill>;
  isRoot?: boolean;
};

export type UpdateUserDto = {
  [key: string]: unknown;
};

/**
 * APO custom forms response.
 *
 * Added in Civic Platform version: 9.2.0
 */
export type ResponseApoCustomForms = {
  apo_customForms?: Array<ApoCustomForm>;
  /**
   * The return status code.
   */
  status?: number;
};

export type CreateArticleDto = {
  /**
   * 文章标题
   */
  title: string;
  /**
   * 文章内容
   */
  content: string;
  /**
   * 文章摘要
   */
  summary?: string;
  /**
   * 文章图片
   */
  images?: string;
  /**
   * 封面图片
   */
  cover?: string;
  /**
   * 分类ID
   */
  categoryId: number;
  /**
   * 标签名称数组（不存在的标签会自动创建）
   */
  tagNames?: Array<string>;
  /**
   * 标签ID数组（与tagNames二选一）
   */
  tagIds?: Array<number>;
  /**
   * 文章状态
   */
  status?: 'DRAFT' | 'PUBLISHED';
  /**
   * 是否需要登录后才能查看
   */
  requireLogin: boolean;
  /**
   * 是否仅关注后可查看
   */
  requireFollow: boolean;
  /**
   * 是否需要支付后才能查看
   */
  requirePayment: boolean;
  /**
   * 查看所需支付金额
   */
  viewPrice: number;
  /**
   * 文章类型
   */
  type: 'image' | 'mixed';
};

/**
 * A set of custom field name-value pairs on a custom form.
 *
 * Added in Civic Platform version: 9.2.0
 */
export type ApoCustomForm = {
  /**
   * The unique string id of the custom form template for the custom data.
   */
  id?: string;
  /**
   * A custom field name. Note that this is the custom attribute name (not the attribute label). To get the attribute display label, use [Get Record Address Custom Forms Metadata](#operation/v4.get.records.recordId.addresses.addressId.customForms.meta).
   */
  aCustomFieldName?: string;
  /**
   * A custom field value
   */
  aCustomFieldValue?: string;
};

export type UpdateArticleDto = {
  /**
   * 文章标题
   */
  title?: string;
  /**
   * 文章内容
   */
  content?: string;
  /**
   * 文章摘要
   */
  summary?: string;
  /**
   * 文章图片
   */
  images?: string;
  /**
   * 封面图片
   */
  cover?: string;
  /**
   * 分类ID
   */
  categoryId?: number;
  /**
   * 标签名称数组（不存在的标签会自动创建）
   */
  tagNames?: Array<string>;
  /**
   * 标签ID数组（与tagNames二选一）
   */
  tagIds?: Array<string>;
  /**
   * 文章状态
   */
  status?: 'DRAFT' | 'PUBLISHED';
  /**
   * 是否需要登录后才能查看
   */
  requireLogin?: boolean;
  /**
   * 是否仅关注后可查看
   */
  requireFollow?: boolean;
  /**
   * 是否需要支付后才能查看
   */
  requirePayment?: boolean;
  /**
   * 查看所需支付金额
   */
  viewPrice?: number;
  /**
   * 文章类型
   */
  type?: 'image' | 'mixed';
};

export type ResponseApoCustomFormsMetadata = {
  result?: Array<ApoCustomFormsMetadata>;
  /**
   * The return status code.
   */
  status?: number;
};

export type CreateCommentDto = {
  /**
   * 评论内容
   */
  content: string;
  /**
   * 文章ID
   */
  articleId: number;
  /**
   * 父评论ID
   */
  parentId?: number;
};

/**
 * Contains metadata description of a custom form, including the custom fields metadata.
 *
 * Added in Civic Platform version: 9.2.0
 */
export type ApoCustomFormsMetadata = {
  /**
   * The name of the custom form
   */
  name?: string;
  /**
   * Describes the usage or puporse of the custom form.
   */
  description?: string;
  /**
   * Contains the field metadata.
   */
  fields?: Array<ApoCustomFormsMetadataFields>;
  /**
   * The unique string identifier of the custom form.
   */
  id?: string;
  /**
   * Indicates whether the custom form is for an address, parcel, or owner.
   */
  customFormType?: 'address' | 'parcel' | 'owner';
};

export type UpdateCommentDto = {
  /**
   * 评论内容
   */
  content?: string;
  /**
   * 文章ID
   */
  articleId?: number;
  /**
   * 父评论ID
   */
  parentId?: number;
};

export type UserCommissionConfigDto = {
  /**
   * 文章抽成比例（0-1之间）
   */
  articleCommissionRate: number;
  /**
   * 会员抽成比例（0-1之间）
   */
  membershipCommissionRate: number;
  /**
   * 商品抽成比例（0-1之间）
   */
  productCommissionRate: number;
  /**
   * 服务抽成比例（0-1之间）
   */
  serviceCommissionRate: number;
  /**
   * 是否启用自定义抽成
   */
  enableCustomCommission: boolean;
  /**
   * 备注
   */
  remark: string;
};

/**
 * Describes the metadata of a custom field.
 *
 * Added in Civic Platform version: 9.2.0
 */
export type ApoCustomFormsMetadataFields = {
  /**
   * The unique custom field id.
   */
  id?: number;
  /**
   * The field name.
   */
  name?: string;
  /**
   * Describes the usage or purpose of the custom field.
   */
  description?: string;
  /**
   * The field label.
   */
  label?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values.
   */
  dataType?: 'Number' | 'Text' | 'Date' | 'Radio' | 'DropdownList';
  /**
   * Any default value for the custom field.
   */
  defaultValue?: string;
  /**
   * The display order of the field on the custom form.
   */
  displayOrder?: number;
  /**
   * The unit of measure of a numeric custom field.
   */
  unit?: string;
  /**
   * Indicates whether or not the field is required.
   */
  isRequired?: 'Y' | 'N';
  /**
   * Indicates whether or not a citizen user can see this field.
   */
  isPublicVisible?: 'Y' | 'N';
  /**
   * Indicates whether or not the field is searchable.
   */
  isRecordSearchable?: 'Y' | 'N';
  /**
   * The field maximum length.
   */
  maxLength?: number;
  /**
   * Contains possible field values, if the field is a dropdown field type.
   */
  options?: Array<{
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  }>;
  /**
   * The name of the shared dropdown list, if the field is a dropdown field type.
   */
  sharedDropdownListName?: string;
};

export type CreateTagDto = {
  /**
   * 标签名称
   */
  name: string;
  /**
   * 标签描述
   */
  description?: string;
  /**
   * 标签头像
   */
  avatar?: string;
  /**
   * 标签背景
   */
  background?: string;
  /**
   * 标签封面
   */
  cover?: string;
  /**
   * 排序
   */
  sort?: number;
};

export type CalculateCommissionDto = {
  /**
   * 金额
   */
  amount: number;
  /**
   * 抽成类型
   */
  type: 'article' | 'membership' | 'product' | 'service';
};

export type ResponseActivityModelArray = {
  result?: Array<ActivityModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type UpdateTagDto = {
  /**
   * 标签名称
   */
  name?: string;
  /**
   * 标签描述
   */
  description?: string;
  /**
   * 标签头像
   */
  avatar?: string;
  /**
   * 标签背景
   */
  background?: string;
  /**
   * 标签封面
   */
  cover?: string;
  /**
   * 排序
   */
  sort?: number;
};

export type SendMailDto = {
  /**
   * 邮箱
   */
  email: string;
};

export type ActivityModel = {
  /**
   * The status of the record activity.
   */
  activityStatus?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The department responsible for the activity.
   */
  assignedDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for the activity.
   */
  assignedUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The activity description
   */
  description?: string;
  /**
   * The desired completion date of the task.
   */
  dueDate?: string;
  /**
   * The activity system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The activity name.
   */
  name?: string;
  /**
   * The priority level assigned to the activity.
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The activity start date.
   */
  startDate?: string;
  /**
   * The activity status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The activity type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type CreateCategoryDto = {
  /**
   * 分类名称
   */
  name: string;
  /**
   * 分类描述
   */
  description?: string;
  /**
   * 排序
   */
  sort: number;
  /**
   * 父分类ID
   */
  parentId?: number;
  /**
   * 分类头像
   */
  avatar?: string;
  /**
   * 分类背景
   */
  background?: string;
  /**
   * 分类封面
   */
  cover?: string;
  /**
   * 分类状态
   */
  status: string;
};

export type UpdateCategoryDto = {
  /**
   * 分类名称
   */
  name?: string;
  /**
   * 分类描述
   */
  description?: string;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 父分类ID
   */
  parentId?: number;
  /**
   * 分类头像
   */
  avatar?: string;
  /**
   * 分类背景
   */
  background?: string;
  /**
   * 分类封面
   */
  cover?: string;
  /**
   * 分类状态
   */
  status?: string;
};

export type ArticleLikeDto = {
  /**
   * 表情类型
   */
  reactionType: 'like' | 'love' | 'haha' | 'wow' | 'sad' | 'angry' | 'dislike';
};

export type BaseResponseDto = {
  /**
   * 业务状态码
   */
  code: number;
  /**
   * 提示信息
   */
  message: string;
  /**
   * 数据体
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * 时间戳
   */
  timestamp: number;
  /**
   * 路径
   */
  path: string;
};

export type RequestActivityUpdateModel = {
  /**
   * The status of the record activity.
   */
  activityStatus?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The department responsible for the activity.
   */
  assignedDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for the activity.
   */
  assignedUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The activity description
   */
  description?: string;
  /**
   * The desired completion date of the task.
   */
  dueDate?: string;
  /**
   * The activity name.
   */
  name?: string;
  /**
   * The priority level assigned to the activity.
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The activity start date.
   */
  startDate?: string;
  /**
   * The activity status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The activity type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type PaginatedResponseDto = {
  /**
   * 业务状态码
   */
  code: number;
  /**
   * 提示信息
   */
  message: string;
  /**
   * 数据列表
   */
  data: {
    [key: string]: unknown;
  };
};

export type AddressModel = {
  addressLine1?: string;
  addressLine2?: string;
  addressTypeFlag?: IdentifierModel;
  city?: string;
  country?: IdentifierModel;
  county?: string;
  description?: string;
  direction?: IdentifierModel;
  distance?: number;
  houseAlphaEnd?: string;
  houseAlphaStart?: string;
  houseFractionEnd?: IdentifierModel;
  houseFractionStart?: IdentifierModel;
  id?: number;
  inspectionDistrict?: string;
  inspectionDistrictPrefix?: string;
  isPrimary?: string;
  levelEnd?: string;
  levelPrefix?: string;
  levelStart?: string;
  neighborhood?: string;
  neighborhoodPrefix?: string;
  postalCode?: string;
  recordId?: CapIdModel;
  refAddressId?: number;
  secondaryStreet?: string;
  secondaryStreetNumber?: number;
  serviceProviderCode?: string;
  state?: IdentifierModel;
  status?: IdentifierModel;
  streetAddress?: string;
  streetEnd?: number;
  streetEndFrom?: number;
  streetEndTo?: number;
  streetName?: string;
  streetPrefix?: string;
  streetStart?: number;
  streetStartFrom?: number;
  streetStartTo?: number;
  streetSuffix?: IdentifierModel;
  streetSuffixDirection?: IdentifierModel;
  type?: IdentifierModel;
  unitEnd?: string;
  unitStart?: string;
  unitType?: IdentifierModel;
  xCoordinate?: number;
  yCoordinate?: number;
};

export type ResponseRecordAddressModelArray = {
  result?: Array<RecordAddressModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type CreateInviteDto = {
  /**
   * 邀请类型
   */
  type: 'GENERAL' | 'VIP';
  /**
   * 邀请分成比例（0-1之间）
   */
  commissionRate?: number;
  /**
   * 过期时间
   */
  expiredAt?: string;
  /**
   * 备注
   */
  remark?: string;
};

export type RecordAddressModel = {
  /**
   * The first line of the address.
   */
  addressLine1?: string;
  /**
   * The second line of the address.
   */
  addressLine2?: string;
  /**
   * A code name or an abbreviation of the address type.
   */
  addressTypeFlag?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The name of the city.
   */
  city?: string;
  /**
   * The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).
   */
  country?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The beginning intersecting street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  crossStreetNameStart?: string;
  /**
   * The ending intersecting street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  crossStreetNameEnd?: string;
  /**
   * The name of the county.
   */
  county?: string;
  /**
   * A description of the address.
   */
  description?: string;
  /**
   * The street direction of the primary address associated with the application.
   */
  direction?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The distance from another landmark used to locate the address.
   */
  distance?: number;
  /**
   * The beginning alphabetic unit in street address.
   */
  houseAlphaStart?: string;
  /**
   * The ending alphabetic unit in street address.
   */
  houseAlphaEnd?: string;
  /**
   * Beginning fraction value used in combination with the Street number fields.
   */
  houseFractionStart?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Ending franction value used in combination with the Street number fields.
   */
  houseFractionEnd?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The unique address id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The inspection district where the address is located.
   */
  inspectionDistrict?: string;
  /**
   * The prefix for the inspection district where the address is located.
   */
  inspectionDistrictPrefix?: string;
  /**
   * Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.
   */
  isPrimary?: string;
  /**
   * The ending level number (floor number) that makes up the address within a complex.
   */
  levelEnd?: string;
  /**
   * The prefix for the level numbers (floor numbers) that make up the address.
   */
  levelPrefix?: string;
  /**
   * The starting level number (floor number) that makes up the address within a complex.
   */
  levelStart?: string;
  /**
   * The type of location used for Right of Way Management. The valid values are configured with the LOCATION_TYPE standard choice in Civic Platform Administration.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  locationType?: string;
  /**
   * The neighborhood where the address is located.
   */
  neighborhood?: string;
  /**
   * The prefix for neighborhood where the address is located.
   */
  neighborhoodPrefix?: string;
  /**
   * The postal ZIP code for the address.
   */
  postalCode?: string;
  recordId?: RecordIdModel;
  /**
   * The reference address id.
   */
  refAddressId?: number;
  /**
   * This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
   */
  secondaryStreet?: string;
  /**
   * This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
   */
  secondaryStreetNumber?: number;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The name of the state.
   */
  state?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The address status indicating whether the address is active or inactive.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The street address.
   */
  streetAddress?: string;
  /**
   * The ending number of a street address range.
   */
  streetEnd?: number;
  /**
   * The beginning number of a street end address range.
   */
  streetEndFrom?: number;
  /**
   * The ending number of a street end address range.
   */
  streetEndTo?: number;
  /**
   * The name of the street.
   */
  streetName?: string;
  /**
   * The beginning street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  streetNameStart?: string;
  /**
   * The ending street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  streetNameEnd?: string;
  /**
   * Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, "West" is the street prefix.
   */
  streetPrefix?: string;
  /**
   * The starting number of a street address range.
   */
  streetStart?: number;
  /**
   * The beginning number of a street start address range.
   */
  streetStartFrom?: number;
  /**
   * The ending number of a street start address range.
   */
  streetStartTo?: number;
  /**
   * The type of street such as "Lane" or "Boulevard".
   */
  streetSuffix?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, "NW" is the street suffix direction.
   */
  streetSuffixDirection?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The address type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The starting value of a range of unit numbers.
   */
  unitStart?: string;
  /**
   * The ending value of a range of unit numbers.
   */
  unitEnd?: string;
  /**
   * The unit type designation of the address.
   */
  unitType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The longitudinal coordinate for this address.
   */
  xCoordinate?: number;
  /**
   * The latitudinal coordinate for this address.
   */
  yCoordinate?: number;
};

export type UseInviteDto = {
  /**
   * 邀请码
   */
  inviteCode: string;
};

export type RecordAddressCustomFormsModel = {
  /**
   * The first line of the address.
   */
  addressLine1?: string;
  /**
   * The second line of the address.
   */
  addressLine2?: string;
  /**
   * A code name or an abbreviation of the address type.
   */
  addressTypeFlag?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The name of the city.
   */
  city?: string;
  /**
   * The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).
   */
  country?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The beginning intersecting street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  crossStreetNameStart?: string;
  /**
   * The ending intersecting street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  crossStreetNameEnd?: string;
  /**
   * The name of the county.
   */
  county?: string;
  customForms?: Array<CustomAttributeModel>;
  /**
   * A description of the address.
   */
  description?: string;
  /**
   * The street direction of the primary address associated with the application.
   */
  direction?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The distance from another landmark used to locate the address.
   */
  distance?: number;
  /**
   * The beginning alphabetic unit in street address.
   */
  houseAlphaStart?: string;
  /**
   * The ending alphabetic unit in street address.
   */
  houseAlphaEnd?: string;
  /**
   * Beginning fraction value used in combination with the Street number fields.
   */
  houseFractionStart?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Ending franction value used in combination with the Street number fields.
   */
  houseFractionEnd?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The unique address id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The inspection district where the address is located.
   */
  inspectionDistrict?: string;
  /**
   * The prefix for the inspection district where the address is located.
   */
  inspectionDistrictPrefix?: string;
  /**
   * Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.
   */
  isPrimary?: string;
  /**
   * The ending level number (floor number) that makes up the address within a complex.
   */
  levelEnd?: string;
  /**
   * The prefix for the level numbers (floor numbers) that make up the address.
   */
  levelPrefix?: string;
  /**
   * The starting level number (floor number) that makes up the address within a complex.
   */
  levelStart?: string;
  /**
   * The type of location used for Right of Way Management. The valid values are configured with the LOCATION_TYPE standard choice in Civic Platform Administration.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  locationType?: string;
  /**
   * The neighborhood where the address is located.
   */
  neighborhood?: string;
  /**
   * The prefix for neighborhood where the address is located.
   */
  neighborhoodPrefix?: string;
  /**
   * The postal ZIP code for the address.
   */
  postalCode?: string;
  recordId?: RecordIdModel;
  /**
   * The reference address id.
   */
  refAddressId?: number;
  /**
   * This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
   */
  secondaryStreet?: string;
  /**
   * This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
   */
  secondaryStreetNumber?: number;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The name of the state.
   */
  state?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The address status indicating whether the address is active or inactive.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The street address.
   */
  streetAddress?: string;
  /**
   * The ending number of a street address range.
   */
  streetEnd?: number;
  /**
   * The beginning number of a street end address range.
   */
  streetEndFrom?: number;
  /**
   * The ending number of a street end address range.
   */
  streetEndTo?: number;
  /**
   * The name of the street.
   */
  streetName?: string;
  /**
   * The beginning street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  streetNameStart?: string;
  /**
   * The ending street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  streetNameEnd?: string;
  /**
   * Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, "West" is the street prefix.
   */
  streetPrefix?: string;
  /**
   * The starting number of a street address range.
   */
  streetStart?: number;
  /**
   * The beginning number of a street start address range.
   */
  streetStartFrom?: number;
  /**
   * The ending number of a street start address range.
   */
  streetStartTo?: number;
  /**
   * The type of street such as "Lane" or "Boulevard".
   */
  streetSuffix?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, "NW" is the street suffix direction.
   */
  streetSuffixDirection?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The address type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The starting value of a range of unit numbers.
   */
  unitStart?: string;
  /**
   * The ending value of a range of unit numbers.
   */
  unitEnd?: string;
  /**
   * The unit type designation of the address.
   */
  unitType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The longitudinal coordinate for this address.
   */
  xCoordinate?: number;
  /**
   * The latitudinal coordinate for this address.
   */
  yCoordinate?: number;
};

export type ListResponseDto = {
  /**
   * 业务状态码
   */
  code: number;
  /**
   * 提示信息
   */
  message: string;
  /**
   * 数据列表
   */
  data: Array<{
    [key: string]: unknown;
  }>;
  /**
   * 时间戳
   */
  timestamp: number;
};

export type RequestRecordAddressModel = {
  /**
   * The first line of the address.
   */
  addressLine1?: string;
  /**
   * The first line of the address.
   */
  addressLine2?: string;
  /**
   * A code name or an abbreviation of the address type.
   */
  addressTypeFlag?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The name of the city.
   */
  city?: string;
  /**
   * The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).
   */
  country?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The name of the county.
   */
  county?: string;
  /**
   * The beginning intersecting street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  crossStreetNameStart?: string;
  /**
   * The ending intersecting street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  crossStreetNameEnd?: string;
  /**
   * A description of the address.
   */
  description?: string;
  /**
   * The street direction of the primary address associated with the application.
   */
  direction?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The distance from another landmark used to locate the address.
   */
  distance?: number;
  /**
   * The beginning alphabetic unit in street address.
   */
  houseAlphaStart?: string;
  /**
   * The ending alphabetic unit in street address.
   */
  houseAlphaEnd?: string;
  /**
   * Beginning fraction value used in combination with the Street number fields.
   */
  houseFractionStart?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Ending franction value used in combination with the Street number fields.
   */
  houseFractionEnd?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The inspection district where the address is located.
   */
  inspectionDistrict?: string;
  /**
   * The prefix for the inspection district where the address is located.
   */
  inspectionDistrictPrefix?: string;
  /**
   * Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.
   */
  isPrimary?: string;
  /**
   * The starting level number (floor number) that makes up the address within a complex.
   */
  levelStart?: string;
  /**
   * The ending level number (floor number) that makes up the address within a complex.
   */
  levelEnd?: string;
  /**
   * The prefix for the level numbers (floor numbers) that make up the address.
   */
  levelPrefix?: string;
  /**
   * The type of location used for Right of Way Management. The valid values are configured with the LOCATION_TYPE standard choice in Civic Platform Administration.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  locationType?: string;
  /**
   * The neighborhood where the address is located.
   */
  neighborhood?: string;
  /**
   * The prefix for neighborhood where the address is located.
   */
  neighborhoodPrefix?: string;
  /**
   * The postal ZIP code for the address.
   */
  postalCode?: string;
  /**
   * This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
   */
  secondaryStreet?: string;
  /**
   * This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
   */
  secondaryStreetNumber?: number;
  /**
   * The name of the state.
   */
  state?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The address status indicating whether the address is active or inactive.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The street address.
   */
  streetAddress?: string;
  /**
   * The ending number of a street address range.
   */
  streetEnd?: number;
  /**
   * The name of the street.
   */
  streetName?: string;
  /**
   * The beginning street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  streetNameStart?: string;
  /**
   * The ending street name for searching.
   *
   * Added in Civic Platform version: 9.2.0
   *
   */
  streetNameEnd?: string;
  /**
   * Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, "West" is the street prefix.
   */
  streetPrefix?: string;
  /**
   * The starting number of a street address range.
   */
  streetStart?: number;
  /**
   * The type of street such as "Lane" or "Boulevard".
   */
  streetSuffix?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, "NW" is the street suffix direction.
   */
  streetSuffixDirection?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The address type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The starting value of a range of unit numbers.
   */
  unitStart?: string;
  /**
   * The ending value of a range of unit numbers.
   */
  unitEnd?: string;
  /**
   * The unit type designation of the address.
   */
  unitType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The longitudinal coordinate for this address.
   */
  xCoordinate?: number;
  /**
   * The latitudinal coordinate for this address.
   */
  yCoordinate?: number;
};

export type ResponseAssetMasterModelArray = {
  result?: Array<AssetMasterModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type AssetMasterModel = {
  /**
   * The unique alpha-numeric asset ID in an asset group.
   *
   * **Added in Civic Platform version**: 9.2.0
   *
   *
   */
  assetId?: string;
  /**
   * A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together.
   */
  classType?: string;
  /**
   * General comments about the asset.
   */
  comments?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The current value of the asset.
   */
  currentValue?: number;
  /**
   * The date the asset was initially placed into service.
   */
  dateOfService?: string;
  /**
   * Indicates whether or not the parent asset is dependent on this asset.
   */
  dependentFlag?: 'Y' | 'N';
  /**
   * The decline in the asset value by the asset depreciation calculation.
   */
  depreciationAmount?: number;
  /**
   * The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.
   */
  depreciationEndDate?: string;
  /**
   * The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.
   */
  depreciationStartDate?: string;
  /**
   * The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.
   */
  depreciationValue?: number;
  /**
   * The description of the asset.
   */
  description?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The ending point asset ID.
   */
  endID?: string;
  gisObjects?: Array<GIsObjectModel>;
  /**
   * The asset system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The descriptive name of the asset.
   */
  name?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The unique, alpha-numeric asset ID.
   */
  number?: string;
  /**
   * The residual value of the asset at the end of itâ€™s useful life.
   */
  salvageValue?: number;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * A positive numeric value for the asset size.
   */
  size?: number;
  /**
   * The unit of measure corresponding to the asset size.
   */
  sizeUnit?: string;
  /**
   * The starting point asset ID.
   */
  startID?: string;
  /**
   * The beginning value or purchase price of the asset.
   */
  startValue?: number;
  /**
   * The status of the asset.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date the asset status changed.
   */
  statusDate?: string;
  /**
   * The type of asset.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type RecordExpirationModel = {
  /**
   * The date when the condition expires.
   */
  expirationDate?: string;
  /**
   * Indicates whether the expiration is enabled or disabled. See [Get All Record Expiration Statuses](./api-settings.html#operation/v4.get.settings.records.expirationStatuses).
   */
  expirationStatus?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type CreateUploadDto = {
  [key: string]: unknown;
};

export type Upload = {
  [key: string]: unknown;
};

export type CommentModel = {
  /**
   * Indicates whether or not the comment is displayed on inspection.
   */
  displayOnInspection?: 'Y' | 'N';
  /**
   * The comment text.
   */
  text?: string;
};

export type UpdateUploadDto = {
  [key: string]: unknown;
};

export type ResponseRecordCommentModelArray = {
  result?: Array<RecordCommentModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type CreateMessageDto = {
  [key: string]: unknown;
};

export type ResponseRecordCommentModel = {
  result?: RecordCommentModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type UpdateMessageDto = {
  [key: string]: unknown;
};

export type RecordCommentModel = {
  /**
   * The user who added the record comment.
   */
  createdBy?: string;
  /**
   * The date when the record comment was added.
   */
  createdDate?: string;
  /**
   * Indicates whether or not the comment is displayed on inspection.
   */
  displayOnInspection?: 'Y' | 'N';
  /**
   * The comment system id assigned by the Civic Platform server.
   */
  id?: number;
  recordId?: RecordIdModel;
  /**
   * The comment text.
   */
  text?: string;
};

export type ResponseRecordConditionModelArray = {
  result?: Array<RecordConditionModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordConditionModel = {
  /**
   * The department responsible for the action.
   */
  actionbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual responsible for the action.
   */
  actionbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the condition is active.
   */
  activeStatus?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * An unlimited text field to use if other fields are filled.
   */
  additionalInformation?: string;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  additionalInformationPlainText?: string;
  /**
   * The date the standard condition was applied.
   */
  appliedDate?: string;
  /**
   * The department responsible for applying a condition.
   */
  appliedbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for applying a condition.
   */
  appliedbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * An unlimited text field to use if other fields are filled.
   */
  dispAdditionalInformationPlainText?: string;
  /**
   * Indicates whether or not to display the condition notice in Accela Automation when a condition to a record or parcel is applied.
   */
  displayNoticeInAgency?: boolean;
  /**
   * Indicates whether or not to display the condition notice in Accela Citizen Access when a condition to a record or parcel is applied.
   */
  displayNoticeInCitizens?: boolean;
  /**
   * Indicates whether or not to display the condition notice in Accela Citizen Access Fee Estimate page when a condition to a record or parcel is applied.
   */
  displayNoticeInCitizensFee?: boolean;
  /**
   * The display order of the condition in a list.
   */
  displayOrder?: number;
  /**
   * The date when you want the condition to become effective.
   */
  effectiveDate?: string;
  /**
   * The date when the condition expires.
   */
  expirationDate?: string;
  /**
   * The condition group is an attribute of a condition that organizes condition types. Your agency defines these groups.
   */
  group?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The condition system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * This defines whether or not Accela Automation checks for inheritable conditions when a user associates a child record with a parent record.
   */
  inheritable?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not to display the condition name in the notice.
   */
  isIncludeNameInNotice?: boolean;
  /**
   * Indicates whether or not to display the condition comments in the notice.
   */
  isIncludeShortCommentsInNotice?: boolean;
  /**
   * Narrative comments to help identify the purpose or uses of the standard condition.
   */
  longComments?: string;
  /**
   * The name of the standard condition.
   */
  name?: string;
  /**
   * The priority level assigned to the condition.
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Accela Citizen Access (ACA).
   */
  publicDisplayMessage?: string;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  resAdditionalInformationPlainText?: string;
  /**
   * he action performed in response to a condition.
   */
  resolutionAction?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it
   */
  shortComments?: string;
  /**
   * The condition status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * The status type for a standard condition or an approval condition, applied or not applied for example.
   */
  statusType?: string;
  /**
   * The condition type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type RequestRecordConditionModel = {
  /**
   * The department responsible for the action.
   */
  actionbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual responsible for the action.
   */
  actionbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the condition is active.
   */
  activeStatus?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * An unlimited text field to use if other fields are filled.
   */
  additionalInformation?: string;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  additionalInformationPlainText?: string;
  /**
   * The date the standard condition was applied.
   */
  appliedDate?: string;
  /**
   * The department responsible for applying a condition.
   */
  appliedbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for applying a condition.
   */
  appliedbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The condition sequence number.
   */
  conditionNumber?: number;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  dispAdditionalInformationPlainText?: string;
  /**
   * Indicates whether or not to display the condition notice in Accela Automation when a condition to a record or parcel is applied.
   */
  displayNoticeInAgency?: boolean;
  /**
   * Indicates whether or not to display the condition notice in Accela Citizen Access when a condition to a record or parcel is applied.
   */
  displayNoticeInCitizens?: boolean;
  /**
   * Indicates whether or not to display the condition notice in Accela Citizen Access Fee Estimate page when a condition to a record or parcel is applied.
   */
  displayNoticeInCitizensFee?: boolean;
  /**
   * The display order of the condition in a list.
   */
  displayOrder?: number;
  /**
   * The date when you want the condition to become effective.
   */
  effectiveDate?: string;
  /**
   * The date when the condition expires.
   */
  expirationDate?: string;
  /**
   * The condition group is an attribute of a condition that organizes condition types. Your agency defines these groups.
   */
  group?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * This defines whether or not Accela Automation checks for inheritable conditions when a user associates a child record with a parent record.
   */
  inheritable?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not to display the condition name in the notice.
   */
  isIncludeNameInNotice?: boolean;
  /**
   * Indicates whether or not to display the condition comments in the notice.
   */
  isIncludeShortCommentsInNotice?: boolean;
  /**
   * Narrative comments to help identify the purpose or uses of the standard condition.
   */
  longComments?: string;
  /**
   * The name of the standard condition.
   */
  name?: string;
  /**
   * The priority level assigned to the condition.
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Accela Citizen Access (ACA).
   */
  publicDisplayMessage?: string;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  resAdditionalInformationPlainText?: string;
  /**
   * he action performed in response to a condition.
   */
  resolutionAction?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it
   */
  shortComments?: string;
  /**
   * The condition status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * The status type for a standard condition or an approval condition, applied or not applied for example.
   */
  statusType?: string;
  /**
   * The condition type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type CapConditionModel2 = {
  actionbyDepartment?: IdentifierModel;
  actionbyUser?: IdentifierModel;
  activeStatus?: IdentifierModel;
  additionalInformation?: string;
  additionalInformationPlainText?: string;
  agencyListSQL?: string;
  appliedDate?: string;
  appliedbyDepartment?: IdentifierModel;
  appliedbyUser?: IdentifierModel;
  dispAdditionalInformationPlainText?: string;
  displayNoticeInAgency?: boolean;
  displayNoticeInCitizens?: boolean;
  displayNoticeInCitizensFee?: boolean;
  displayOrder?: number;
  effectiveDate?: string;
  expirationDate?: string;
  group?: IdentifierModel;
  id?: number;
  inheritable?: IdentifierModel;
  isIncludeNameInNotice?: boolean;
  isIncludeShortCommentsInNotice?: boolean;
  longComments?: string;
  name?: string;
  priority?: IdentifierModel;
  publicDisplayMessage?: string;
  recordId?: CapIdModel;
  resAdditionalInformationPlainText?: string;
  resolutionAction?: string;
  serviceProviderCode?: string;
  serviceProviderCodes?: string;
  severity?: IdentifierModel;
  shortComments?: string;
  status?: IdentifierModel;
  statusDate?: string;
  statusType?: string;
  type?: IdentifierModel;
};

export type ResponseRecordContactSimpleModelArray = {
  result?: Array<RecordContactSimpleModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordContactSimpleModel = {
  address?: CompactAddressModel;
  /**
   * The city of birth for an individual.
   */
  birthCity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The birth date.
   */
  birthDate?: string;
  /**
   * The country of birth or region of birth for an individual.
   */
  birthRegion?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The state of birth for an individual.
   */
  birthState?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A secondary business name for the applicable individual.
   */
  businessName?: string;
  /**
   * A comment about the inspection contact.
   */
  comment?: string;
  /**
   * The deceased date.
   */
  deceasedDate?: string;
  /**
   * The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.
   */
  driverLicenseNumber?: string;
  /**
   * The state that issued the driver's license.
   */
  driverLicenseState?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's email address.
   */
  email?: string;
  /**
   * The date when the contact address ceases to be active.
   */
  endDate?: string;
  /**
   * The fax number for the contact.
   */
  fax?: string;
  /**
   * Fax Number Country Code
   */
  faxCountryCode?: string;
  /**
   * The Federal Employer Identification Number. It is used to identify a business for tax purposes.
   */
  federalEmployerId?: string;
  /**
   * The contact's first name.
   */
  firstName?: string;
  /**
   * The contact's full name.
   */
  fullName?: string;
  /**
   * The gender (male or female) of the individual.
   */
  gender?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.
   */
  individualOrOrganization?: string;
  /**
   * Indicates whether or not to designate the contact as the primary contact Only one address can be primary at any given time.
   */
  isPrimary?: 'Y' | 'N';
  /**
   * The last name (surname).
   */
  lastName?: string;
  /**
   * The middle name.
   */
  middleName?: string;
  /**
   * The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.
   */
  organizationName?: string;
  /**
   * The contact's passport number. This field is only active when the Contact Type selected is Individual.
   */
  passportNumber?: string;
  /**
   * The primary telephone number of the contact.
   */
  phone1?: string;
  /**
   * Phone Number 1 Country Code
   */
  phone1CountryCode?: string;
  /**
   * The secondary telephone number of the contact.
   */
  phone2?: string;
  /**
   * Phone Number 2 Country Code
   */
  phone2CountryCode?: string;
  /**
   * The tertiary telephone number for the contact.
   */
  phone3?: string;
  /**
   * Phone Number 3 Country Code
   */
  phone3CountryCode?: string;
  /**
   * The post office box number.
   */
  postOfficeBox?: string;
  /**
   * The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).
   */
  preferredChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).
   */
  race?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  recordId?: RecordIdModel;
  /**
   * The unique Id generated for a contact stored in the sytem.
   */
  referenceContactId?: string;
  /**
   * The contact's relationship to the application or service request.
   */
  relation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).
   */
  salutation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual's social security number. This field is only active when the Contact Type selected is Individual.
   */
  socialSecurityNumber?: string;
  /**
   * The date the contact became active.
   */
  startDate?: string;
  /**
   * The contact's state ID number. This field is only active when the Contact Type selected is Individual.
   */
  stateIdNumber?: string;
  /**
   * The contact status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact name suffix.
   */
  suffix?: string;
  /**
   * The individual's business title.
   */
  title?: string;
  /**
   * The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.
   */
  tradeName?: string;
  /**
   * The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type RecordContactModel = {
  address?: CompactAddressModel;
  /**
   * The city of birth for an individual.
   */
  birthCity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The birth date.
   */
  birthDate?: string;
  /**
   * The country of birth or region of birth for an individual.
   */
  birthRegion?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The state of birth for an individual.
   */
  birthState?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A secondary business name for the applicable individual.
   */
  businessName?: string;
  /**
   * A comment about the inspection contact.
   */
  comment?: string;
  /**
   * The deceased date.
   */
  deceasedDate?: string;
  /**
   * The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.
   */
  driverLicenseNumber?: string;
  /**
   * The state that issued the driver's license.
   */
  driverLicenseState?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's email address.
   */
  email?: string;
  /**
   * The date when the contact address ceases to be active.
   */
  endDate?: string;
  /**
   * The fax number for the contact.
   */
  fax?: string;
  /**
   * Fax Number Country Code
   */
  faxCountryCode?: string;
  /**
   * The Federal Employer Identification Number. It is used to identify a business for tax purposes.
   */
  federalEmployerId?: string;
  /**
   * The contact's first name.
   */
  firstName?: string;
  /**
   * The contact's full name.
   */
  fullName?: string;
  /**
   * The gender (male or female) of the individual.
   */
  gender?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.
   */
  individualOrOrganization?: string;
  /**
   * Indicates whether or not to designate the contact as the primary contact Only one address can be primary at any given time.
   */
  isPrimary?: 'Y' | 'N';
  /**
   * The last name (surname).
   */
  lastName?: string;
  /**
   * The middle name.
   */
  middleName?: string;
  /**
   * The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.
   */
  organizationName?: string;
  /**
   * The contact's passport number. This field is only active when the Contact Type selected is Individual.
   */
  passportNumber?: string;
  /**
   * The primary telephone number of the contact.
   */
  phone1?: string;
  /**
   * Phone Number 1 Country Code
   */
  phone1CountryCode?: string;
  /**
   * The secondary telephone number of the contact.
   */
  phone2?: string;
  /**
   * Phone Number 2 Country Code
   */
  phone2CountryCode?: string;
  /**
   * The tertiary telephone number for the contact.
   */
  phone3?: string;
  /**
   * Phone Number 3 Country Code
   */
  phone3CountryCode?: string;
  /**
   * The post office box number.
   */
  postOfficeBox?: string;
  /**
   * The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).
   */
  preferredChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).
   */
  race?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  recordId?: RecordIdModel;
  /**
   * The unique Id generated for a contact stored in the sytem.
   */
  referenceContactId?: string;
  /**
   * The contact's relationship to the application or service request.
   */
  relation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).
   */
  salutation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual's social security number. This field is only active when the Contact Type selected is Individual.
   */
  socialSecurityNumber?: string;
  /**
   * The date the contact became active.
   */
  startDate?: string;
  /**
   * The contact's state ID number. This field is only active when the Contact Type selected is Individual.
   */
  stateIdNumber?: string;
  /**
   * The contact status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact name suffix.
   */
  suffix?: string;
  /**
   * The individual's business title.
   */
  title?: string;
  /**
   * The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.
   */
  tradeName?: string;
  /**
   * The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type RecordIdModel = {
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The application tracking number (IVR tracking number).
   */
  trackingId?: number;
  /**
   * The alphanumeric record id.
   */
  value?: string;
};

export type CapIdModel = {
  customId?: string;
  id?: string;
  serviceProviderCode?: string;
  trackingId?: number;
  value?: string;
};

export type RecordIdSimpleModel = {
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The application tracking number (IVR tracking number).
   */
  trackingId?: number;
};

export type ResponseRecordParcelModelArray = {
  result?: Array<RecordParcelModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordParcelModel = {
  /**
   * The block number associated with the parcel.
   */
  block?: string;
  /**
   * A reference to the physical location of parcel information in the County Assessor's office.
   */
  book?: string;
  /**
   * The unique number assigned by the Census Bureau that identifies the tract to which this parcel belongs.
   */
  censusTract?: string;
  /**
   * The council district to which the parcel belongs.
   */
  councilDistrict?: string;
  /**
   * The total value of any tax exemptions that apply to the land within the parcel.
   */
  exemptionValue?: number;
  /**
   * The GIS object ID of the parcel.
   */
  gisSequenceNumber?: number;
  /**
   * The system id of the parcel assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The total value of any improvements to the land within the parcel.
   */
  improvedValue?: number;
  /**
   * Indicates whether or not to designate the parcel as the primary parcel.
   */
  isPrimary?: string;
  /**
   * The total value of the land within the parcel.
   */
  landValue?: number;
  /**
   * The legal description of the parcel.
   */
  legalDescription?: string;
  /**
   * The lot name.
   */
  lot?: string;
  /**
   * The unique map number that identifies the map for this parcel.
   */
  mapNumber?: string;
  /**
   * The map reference for this parcel.
   */
  mapReferenceInfo?: string;
  owners?: Array<RefOwnerModel>;
  /**
   * A reference to the physical location of the parcel information in the records of the County Assessor (or other responsible department).
   */
  page?: string;
  /**
   * The official parcel name or number, as determined by the county assessor or other responsible department.
   */
  parcel?: string;
  /**
   * The total area of the parcel. Your agency determines the standard unit of measure.
   */
  parcelArea?: number;
  /**
   * The alpha-numeric parcel number.
   */
  parcelNumber?: string;
  /**
   * The total area of the parcel. Your agency determines the standard unit of measure.
   */
  planArea?: string;
  /**
   * When land is surveyed using the rectangular-survey system, range represents the measure of units east and west of the base line.
   */
  range?: string;
  recordId?: RecordIdModel;
  /**
   * A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line.
   */
  section?: number;
  /**
   * The parcel status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The name of the subdivision.
   */
  subdivision?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The supervisor district to which the parcel belongs.
   */
  supervisorDistrict?: string;
  /**
   * When land is surveyed using the rectangular-survey system, township represents the measure of units North or South of the base line. Townships typically measure 6 miles to a side, or 36 square miles.
   */
  township?: string;
  /**
   * The name of the tract associated with this application. A tract may contain one or more related parcels.
   */
  tract?: string;
};

export type RecordTypeNoAliasModel = {
  /**
   * The 4th level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  category?: string;
  /**
   * The name of the record type filter which defines the record types to be displayed for the citizen user.
   */
  filterName?: string;
  /**
   * The 1st level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  group?: string;
  /**
   * The record type system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * Use to filter by the module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  subType?: string;
  /**
   * The record type display text
   */
  text?: string;
  /**
   * The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  type?: string;
  /**
   * The record type value.
   */
  value?: string;
};

export type RecordTypeModel = {
  /**
   * The record type alias.
   */
  alias?: string;
  /**
   * The 4th level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  category?: string;
  /**
   * The name of the record type filter which defines the record types to be displayed for the citizen user.
   */
  filterName?: string;
  /**
   * The 1st level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  group?: string;
  /**
   * The record type id.
   */
  id?: string;
  /**
   * The module the record type belongs to.
   */
  module?: string;
  /**
   * The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  subType?: string;
  /**
   * The localized display text.
   */
  text?: string;
  /**
   * The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category).
   */
  type?: string;
  /**
   * The stored value.
   */
  value?: string;
};

export type ChildDrill = {
  drillId?: number;
  id?: string;
};

export type CompactAddressModel = {
  /**
   * The first line of the address.
   */
  addressLine1?: string;
  /**
   * The second line of the address.
   */
  addressLine2?: string;
  /**
   * The third line of the address.
   */
  addressLine3?: string;
  /**
   * The name of the city.
   */
  city?: string;
  /**
   * The name of the country.
   */
  country?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The postal ZIP code for the address.
   */
  postalCode?: string;
  /**
   * The address state.
   */
  state?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type ConditionHistoryModel = {
  /**
   * The department responsible for the action.
   */
  actionbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual responsible for the action.
   */
  actionbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the condition is active.
   */
  activeStatus?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * An unlimited text field to use if other fields are filled.
   */
  additionalInformation?: string;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  additionalInformationPlainText?: string;
  /**
   * The date the standard condition was applied.
   */
  appliedDate?: string;
  /**
   * The department responsible for applying a condition.
   */
  appliedbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for applying a condition.
   */
  appliedbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * An unlimited text field to use if other fields are filled.
   */
  dispAdditionalInformationPlainText?: string;
  /**
   * Indicates whether or not to display the condition notice in Accela Automation when a condition to a record or parcel is applied.
   */
  displayNoticeInAgency?: boolean;
  /**
   * Indicates whether or not to display the condition notice in Accela Citizen Access when a condition to a record or parcel is applied.
   */
  displayNoticeInCitizens?: boolean;
  /**
   * Indicates whether or not to display the condition notice in Accela Citizen Access Fee Estimate page when a condition to a record or parcel is applied.
   */
  displayNoticeInCitizensFee?: boolean;
  /**
   * The date when you want the condition to become effective.
   */
  effectiveDate?: string;
  /**
   * The date when the condition expires.
   */
  expirationDate?: string;
  /**
   * The condition group is an attribute of a condition that organizes condition types. Your agency defines these groups.
   */
  group?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The condition system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * This defines whether or not Accela Automation checks for inheritable conditions when a user associates a child record with a parent record.
   */
  inheritable?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not to display the condition name in the notice.
   */
  isIncludeNameInNotice?: boolean;
  /**
   * Indicates whether or not to display the condition comments in the notice.
   */
  isIncludeShortCommentsInNotice?: boolean;
  /**
   * Narrative comments to help identify the purpose or uses of the standard condition.
   */
  longComments?: string;
  /**
   * The name of the standard condition.
   */
  name?: string;
  /**
   * The priority level assigned to the condition.
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Accela Citizen Access (ACA).
   */
  publicDisplayMessage?: string;
  /**
   * An unlimited text field to use if other fields are filled.
   */
  resAdditionalInformationPlainText?: string;
  /**
   * he action performed in response to a condition.
   */
  resolutionAction?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it
   */
  shortComments?: string;
  /**
   * The condition status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * The status type for a standard condition or an approval condition, applied or not applied for example.
   */
  statusType?: string;
  /**
   * The condition type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type ResponseContactAddressArray = {
  result?: Array<ContactAddress>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ContactAddress = {
  addressLine1?: string;
  addressLine2?: string;
  addressLine3?: string;
  city?: string;
  country?: IdentifierModel;
  direction?: IdentifierModel;
  effectiveDate?: string;
  expirationDate?: string;
  fax?: string;
  faxCountryCode?: string;
  houseAlphaEnd?: string;
  houseAlphaStart?: string;
  id?: number;
  isPrimary?: string;
  levelEnd?: string;
  levelPrefix?: string;
  levelStart?: string;
  phone?: string;
  phoneCountryCode?: string;
  postalCode?: string;
  recipient?: string;
  state?: IdentifierModel;
  status?: IdentifierModel;
  streetAddress?: string;
  streetEnd?: number;
  streetName?: string;
  streetPrefix?: string;
  streetStart?: number;
  streetSuffix?: IdentifierModel;
  streetSuffixDirection?: IdentifierModel;
  type?: IdentifierModel;
  unitEnd?: string;
  unitStart?: string;
  unitType?: IdentifierModel;
};

export type ContactTypeModel = {
  /**
   * The maximum number of times a contact type is used.
   */
  maxOccurance?: number;
  /**
   * The minimum number of times a contact type is used.
   */
  minOccurance?: number;
  /**
   * The contact type value.
   */
  value?: string;
};

export type ResponseCostingModelArray = {
  result?: Array<CostingModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RequestCostingModelArray = {
  /**
   * Comments about the cost.
   */
  comments?: string;
  /**
   * The cost account name.
   */
  costAccount?: string;
  /**
   * The date when the cost applied.
   */
  costDate?: string;
  /**
   * The cost factor.
   */
  costFactor?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost item name.
   */
  costItem?: string;
  /**
   * The cost item display name.
   */
  dispCostingCostItem?: string;
  /**
   * Indicates whether or not costing is distributed.
   */
  distributeFlag?: 'Y' | 'N';
  /**
   * The end time associated to the cost item.
   */
  endTime?: string;
  /**
   * The fixed rate associated to the cost item.
   */
  fixedRate?: number;
  /**
   * The cost item system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The cost item quantity.
   */
  quantity?: number;
  /**
   * Details about the cost item quantity.
   */
  quantityDetail?: string;
  quantityDetailList?: CostingQuantityModel;
  /**
   * Related cost item.
   */
  relatedAsgnNbr?: number;
  /**
   * The start time associated to the cost item.
   */
  startTime?: string;
  /**
   * The cost item status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The total cost.
   */
  totalCost?: number;
  /**
   * The cost item type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost item's unit of measure.
   */
  unitOfMeasure?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost unit rate.
   */
  unitRate?: number;
  /**
   * The work order task code associated to the cost item.
   */
  workOrderTaskCode?: string;
  /**
   * The order of the work order task.
   */
  workOrderTaskCodeIndex?: number;
};

export type CostingModel = {
  /**
   * Comments about the cost.
   */
  comments?: string;
  /**
   * The cost account name.
   */
  costAccount?: string;
  /**
   * The date when the cost applied.
   */
  costDate?: string;
  /**
   * The cost factor.
   */
  costFactor?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost item name.
   */
  costItem?: string;
  /**
   * The cost item display name.
   */
  dispCostingCostItem?: string;
  /**
   * Indicates whether or not costing is distributed.
   */
  distributeFlag?: 'Y' | 'N';
  /**
   * The end time associated to the cost item.
   */
  endTime?: string;
  /**
   * The fixed rate associated to the cost item.
   */
  fixedRate?: number;
  /**
   * The cost item system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The cost item quantity.
   */
  quantity?: number;
  /**
   * Details about the cost item quantity.
   */
  quantityDetail?: string;
  quantityDetailList?: CostingQuantityModel;
  recordId?: RecordIdModel;
  /**
   * Related cost item.
   */
  relatedAsgnNbr?: number;
  /**
   * The start time associated to the cost item.
   */
  startTime?: string;
  /**
   * The cost item status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The total cost.
   */
  totalCost?: number;
  /**
   * The cost item type.
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost item's unit of measure.
   */
  unitOfMeasure?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost unit rate.
   */
  unitRate?: number;
  /**
   * The work order task code associated to the cost item.
   */
  workOrderTaskCode?: string;
  /**
   * The order of the work order task.
   */
  workOrderTaskCodeIndex?: number;
};

export type CostingQuantityModel = {
  /**
   * The cost factor.
   */
  factor?: number;
  /**
   * The number of minutes associated to the cost.
   */
  minutes?: number;
};

export type ResponseCustomAttributeModelArray = {
  result?: Array<CustomAttributeModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

/**
 * Contains a custom form consisting of the custom form id and custom field name and value pairs. For example in JSON, "My Custom Field": "My Custom Value". The custom field name and its data type are defined in Civic Platform custom forms or custom tables: <br/>**For a Text field**, the maximum length is 256.  <br/>**For a Number field**, any numeric form is allowed, including negative numbers.  <br/>**For a Date field**, the format is MM/dd/yyyy.  <br/>**For a Time field**, the format is hh:mm.  <br/>**For a TextArea field**, the maximum length is 4000 characters, and allows line return characters.  <br/>**For a DropdownList field**, the dropdown list values are in the options[] array.  <br/>**For a CheckBox field**, the (case-sensitive) valid values are "UNCHECKED" and "CHECKED".  <br/>**For a Radio(Y/N) field**, the (case-sensitive) valid values are "Yes" and "No".
 */
export type CustomAttributeModel = {
  /**
   * The custom form id.
   */
  id?: string;
  /**
   * The name of a custom field.
   */
  '<aCustomFieldName>'?: string;
  /**
   * The value of a custom field.
   */
  '<aCustomFieldValue>'?: string;
};

export type DepartmentModel = {
  /**
   * The department agency
   */
  agency?: string;
  /**
   * The name of the bureau, which is an organization level within an agency.
   */
  bureau?: string;
  /**
   * The name of the division, which is an organization level within a bureau.
   */
  division?: string;
  /**
   * The department group.
   */
  group?: string;
  /**
   * The department system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * An organization level within a group. An office is the final level within an organization structure. Agency->Bureau->Division->Section->Group->Office.
   */
  office?: string;
  /**
   * A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line.
   */
  section?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The localized display text.
   */
  text?: string;
  /**
   * The value for the specified parameter.
   */
  value?: string;
};

export type ResponseDescribeRecordModel = {
  result?: DescribeRecordModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type DescribeRecordModel = {
  elements?: Array<ElementModel>;
  fields?: Array<FieldModel>;
};

export type ResponseDocumentModelArray = {
  result?: Array<DocumentModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type DocumentModel = {
  /**
   * The document category. The list of category options varies depending on the document group.
   */
  category?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  deletable?: UserRolePrivilegeModel;
  /**
   * The name of the department the document belongs to.
   */
  department?: string;
  /**
   * The document description.
   */
  description?: string;
  downloadable?: UserRolePrivilegeModel;
  /**
   * The unique ID of the entity or record.
   */
  entityId?: string;
  /**
   * The type of entity.
   */
  entityType?: string;
  /**
   * The name of the file as it displays in the source location.
   */
  fileName?: string;
  /**
   * The document group.
   */
  group?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The document id.
   */
  id?: number;
  /**
   * The user account that last modified the document.
   */
  modifiedBy?: string;
  /**
   * The date the document was last modified.
   */
  modifiedDate?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The file size of the document.
   */
  size?: number;
  /**
   * The name for your agency's electronic document management system.
   */
  source?: string;
  /**
   * The documet status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  titleViewable?: UserRolePrivilegeModel;
  /**
   * The document type.
   */
  type?: string;
  /**
   * The user who uploaded the document to the record.
   */
  uploadedBy?: string;
  /**
   * The date when the document was uploaded.
   */
  uploadedDate?: string;
  /**
   * This is the virtual folder for storing the attachment. With virtual folders you can organize uploaded attachments in groups
   */
  virtualFolders?: string;
};

export type ResponseDocumentTypeModelArray = {
  result?: Array<DocumentTypeModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type DocumentTypeModel = {
  /**
   * Indicates whether or not the record can be deleted.
   */
  deletable?: boolean;
  /**
   * Indicates whether or not the document type can be downloaded.
   */
  downloadable?: boolean;
  /**
   * The document group for the document category.
   */
  group?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The document category system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The localized display text.
   */
  text?: string;
  /**
   * Indicates whether or not you can upload documents of the specified category.
   */
  uploadable?: boolean;
  /**
   * The document category value.
   */
  value?: string;
  /**
   * Indicates whether or not you can view the document category associated with the record.
   */
  viewable?: boolean;
};

export type ElementModel = {
  /**
   * Indicates whether or not the entity is a reference.
   */
  isReference?: boolean;
  /**
   * Indicates whether or not the entity is required.
   */
  isRequired?: boolean;
  /**
   * The entity name.
   */
  name?: string;
  types?: Array<ContactTypeModel>;
};

export type ResponseEstimateFeeModel = {
  result?: EstimateFeeModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type EstimateFeeModel = {
  /**
   * The standard ISO 4217 currency code. For example, "USD" for US Dollars
   */
  currencyCode?: string;
  /**
   * The total fee.
   */
  feeTotal?: number;
};

export type FeeItemBaseModel = {
  /**
   * The fee item code.
   */
  code?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Notes about the fee.
   */
  feeNotes?: string;
  /**
   * The fee item system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The time interval for processing invoices.
   */
  paymentPeriod?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The number of units for which the same fee applies.
   */
  quantity?: number;
  /**
   * Contains parameters that define the fee schedule.
   */
  schedule?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The fee schedule version.
   */
  version?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type FeeItemBaseModel1 = {
  /**
   * The fee item code.
   */
  code?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The fee item system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * A note entered against a fee item.
   */
  notes?: string;
  /**
   * The time interval for processing invoices.
   */
  paymentPeriod?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The number of units for which the fee applies.
   */
  quantity?: number;
  /**
   * Contains parameters that define the fee schedule. See [Get All Fee Schedules for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.fees.schedules).
   */
  schedule?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The fee item version.
   */
  version?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type FeeItemModel = {
  /**
   * Indicates whether or not the fee schedule is required in order to make it accessible to citizens.
   */
  acaRequiredFlag?: string;
  /**
   * The code associated with the first fee
   */
  accountCode1?: string;
  /**
   * Allocation proportion or amount of account code 1.
   */
  accountCode1Allocation?: number;
  /**
   * The code associated with the second fee
   */
  accountCode2?: string;
  /**
   * Allocation proportion or amount of account code 2.
   */
  accountCode2Allocation?: number;
  /**
   * The code associated with the third fee
   */
  accountCode3?: string;
  /**
   * Allocation proportion or amount of account code 3.
   */
  accountCode3Allocation?: number;
  /**
   * The allocated fee for account code 1.
   */
  allocatedFee1?: number;
  /**
   * The allocated fee for account code 2.
   */
  allocatedFee2?: number;
  /**
   * The allocated fee for account code 3.
   */
  allocatedFee3?: number;
  /**
   * The amount of a payment transaction or account balance.
   */
  amount?: number;
  /**
   * The date the fee is applied.
   */
  applyDate?: string;
  /**
   * Indicates whether or not the fee item is automatically assessed.
   */
  autoAssessFlag?: string;
  /**
   * Indicates whether or not the fee item is automatically invoiced.
   */
  autoInvoiceFlag?: string;
  /**
   * The amount due.
   */
  balanceDue?: number;
  /**
   * Indicates whether or not the fee amount is based on fee calculation.
   */
  calcFlag?: string;
  /**
   * Indicates whether or not the fee amount is based on fee calculation.
   */
  calculatedFlag?: string;
  /**
   * A code identifying an associated item
   */
  code?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The fee description.
   */
  description?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The display order of the fee item.
   */
  displayOrder?: number;
  /**
   * Fee item effective date.
   */
  effectDate?: string;
  /**
   * The date when the item expires
   */
  expireDate?: string;
  /**
   * The fee allocation type to each account code.
   */
  feeAllocationType?: string;
  /**
   * Notes about the fee.
   */
  feeNotes?: string;
  /**
   * The fee system id.
   */
  id?: number;
  /**
   * The invoice ID for the fee item.
   */
  invoiceId?: number;
  /**
   * The maximum fee item.
   */
  maxFee?: number;
  /**
   * The minimum fee item.
   */
  minFee?: number;
  /**
   * The time interval for processing invoices.
   */
  paymentPeriod?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The priority level assigned to the fee item.
   */
  priority?: number;
  /**
   * The number of units for which the same fee applies.
   */
  quantity?: number;
  recordId?: RecordIdModel;
  /**
   * The payment schedule name.
   */
  schedule?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The fee item status.
   */
  status?: string;
  /**
   * The subgroup the fee is associated with.
   */
  subGroup?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * User defined field 1
   */
  udf1?: string;
  /**
   * User defined field 2
   */
  udf2?: string;
  /**
   * User defined field 3
   */
  udf3?: string;
  /**
   * The unit of measure used for the object.
   */
  unit?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The variable associated with the fee item.
   */
  variable?: string;
  /**
   * The payment schedule version
   */
  version?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type ResponseFeeItemModel1Array = {
  result?: Array<FeeItemModel1>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type FeeItemModel1 = {
  /**
   * The code associated with the first fee
   */
  accountCode1?: string;
  /**
   * Allocation proportion or amount of account code 1.
   */
  accountCode1Allocation?: number;
  /**
   * The code associated with the second fee
   */
  accountCode2?: string;
  /**
   * Allocation proportion or amount of account code 2.
   */
  accountCode2Allocation?: number;
  /**
   * The code associated with the third fee
   */
  accountCode3?: string;
  /**
   * Allocation proportion or amount of account code 3.
   */
  accountCode3Allocation?: number;
  /**
   * The amount of a payment transaction or account balance.
   */
  amount?: number;
  /**
   * The date when the fee item was added or updated.
   */
  auditDate?: string;
  /**
   * The date the fee is applied.
   */
  applyDate?: string;
  /**
   * The amount due.
   */
  balanceDue?: number;
  /**
   * A code identifying an associated item
   */
  code?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The display order of the fee item.
   */
  displayOrder?: number;
  /**
   * The fee system id.
   */
  id?: number;
  /**
   * The invoice ID for the fee item.
   */
  invoiceId?: number;
  /**
   * The maximum fee item.
   */
  maxFee?: number;
  /**
   * The minimum fee item.
   */
  minFee?: number;
  /**
   * Notes about the fee item.
   */
  notes?: string;
  /**
   * The time interval for processing invoices.
   */
  paymentPeriod?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The priority level assigned to the fee item.
   */
  priority?: number;
  /**
   * The number of units for which the same fee applies.
   */
  quantity?: number;
  recordId?: RecordIdModel;
  /**
   * The payment schedule name.
   */
  schedule?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The fee item status.
   */
  status?: string;
  /**
   * The subgroup the fee is associated with.
   */
  subGroup?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * User defined field 1
   */
  udf1?: string;
  /**
   * User defined field 2
   */
  udf2?: string;
  /**
   * User defined field 3
   */
  udf3?: string;
  /**
   * The unit of measure used for the object.
   */
  unit?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The variable associated with the fee item.
   */
  variable?: string;
  /**
   * The payment schedule version
   */
  version?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type FieldModel = {
  /**
   * Indicates whether or not the information is required.
   */
  isRequired?: boolean;
  /**
   * The field name.
   */
  name?: string;
};

export type GIsObjectModel = {
  /**
   * The GIS object id.
   */
  gisId?: string;
  /**
   * The map layer id.
   */
  layerId?: string;
  /**
   * The map service id.
   */
  serviceId?: string;
};

export type ResponseIdentifierModelArray = {
  result?: Array<IdentifierModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type IdentifierModel = {
  text?: string;
  value?: string;
};

/**
 * Specifies the number of days or hours before the scheduled time on the inspection date.
 */
export type InspectionBeforeScheduledTime = {
  /**
   * Inspections can only be cancelled within this number of days before the scheduled time on the inspection date.
   */
  days?: number;
  /**
   * Inspections can only be cancelled within this number of hours before the scheduled time on the inspection date.
   */
  hours?: number;
  /**
   * Inspections can only be cancelled within the number of specified days or hours before this time ("hh:mm AM|PM") on the inspection date.
   */
  time?: string;
};

export type ResponseInspectionModelArray = {
  result?: Array<InspectionModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type InspectionModel = {
  /**
   * Inspection Team name.
   */
  teamName?: string;
  /**
   * Inspection Floor.
   */
  floor?: string;
  /**
   * Inspection Floor Unit.
   */
  floorUnit?: string;
  address?: RecordAddressModel;
  /**
   * This defines whether or not the item is billable.
   */
  billable?: 'Y' | 'N';
  /**
   * The inspection category, which is used to organize inspection types. An inspection type is assigned to one or more inspection categories.
   */
  category?: string;
  /**
   * Indicates whether or not Accela Citizen Access users can view the inspection results comments.
   */
  commentDisplay?: string;
  /**
   * Specifies the type of user who can view the inspection result comments. "All ACA Users" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. "Record Creator Only" - the user who created the record can see the comments for the inspection results. "Record Creator and Licensed Professional" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.
   */
  commentPublicVisible?: Array<string>;
  /**
   * Indicates whether completed time is "AM" or "PM".
   */
  completedAMPM?: string;
  /**
   * The date of completion.
   */
  completedDate?: string;
  /**
   * The time of completion.
   */
  completedTime?: string;
  contact?: InspectionContactModel;
  /**
   * The contact's first name. This field is only active when the Contact Type selected is Individual.
   */
  contactFirstName?: string;
  /**
   * The last name of the contact.
   */
  contactLastName?: string;
  /**
   * The middle name of the contact.
   */
  contactMiddleName?: string;
  /**
   * Indicates whether the desired inspection time is AM or PM.
   */
  desiredAMPM?: string;
  /**
   * The desired inspection date.
   */
  desiredDate?: string;
  /**
   * The desired inspection time.
   */
  desiredTime?: string;
  /**
   * The ending mileage for the inspection.
   */
  endMileage?: number;
  /**
   * The time the inspection was completed.
   */
  endTime?: string;
  /**
   * inspection estimated end time.
   */
  estimatedEndTime?: string;
  /**
   * The scheduled start time for the inspection.
   */
  estimatedStartTime?: string;
  /**
   * The GIS Object ID of the parent application if the application that the inspection is scheduled for has a parent application that is a project application.
   */
  gisAreaName?: string;
  /**
   * The name of the inspection grade.
   */
  grade?: string;
  /**
   * The inspection system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The name of the inspector performing the assessment.
   */
  inspectorFullName?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * This defines whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.
   */
  isAutoAssign?: string;
  /**
   * The angular distance of a place north or south of the earth's equator, usually expressed in degrees and minutes.
   */
  latitude?: number;
  /**
   * The angular distance of a place east or west of the meridian at Greenwich, England, usually expressed in degrees and minutes.
   */
  longitude?: number;
  /**
   * The number of major violations.
   */
  majorViolation?: number;
  /**
   * A labor cost factor that indicates time worked beyond a worker's regular working hours.
   */
  overtime?: string;
  /**
   * The priority level assigned to the inspection.
   */
  priority?: number;
  /**
   * This defines whether or not Accela Citizen Access users can view comment about the inspection results.
   */
  publicVisible?: string;
  record?: SimpleRecordModel;
  recordId?: RecordIdModel;
  recordType?: RecordTypeNoAliasModel;
  /**
   * The time segment, AM or PM, for the time specified in the requestTime field.
   */
  requestAMPM?: string;
  /**
   * Comments about the new inspection. For example, you may identify who requested the inspection.
   */
  requestComment?: string;
  /**
   * The date when an inspection request is submitted.
   */
  requestDate?: string;
  /**
   * This time is automatically generated when a new inspection is scheduled and submitted.
   */
  requestTime?: string;
  /**
   * The first name of the person requesting an inspection-related operation.
   */
  requestorFirstName?: string;
  /**
   * The last name of the person requesting an inspection-related operation.
   */
  requestorLastName?: string;
  /**
   * The middle name of the person requesting an inspection-related operation.
   */
  requestorMiddleName?: string;
  /**
   * The telephone number for the person who processes the inspection request or schedules the inspection.
   */
  requestorPhone?: string;
  /**
   * The telephone number for the person who processes the inspection request or schedules the inspection.
   */
  requestorPhoneIDD?: string;
  /**
   * The user Id of the person requesting an inspection-related operation.
   */
  requestorUserId?: string;
  /**
   * This defines whether the inspection is optional or required.
   */
  requiredInspection?: string;
  /**
   * The inspection result comments.
   */
  resultComment?: string;
  /**
   * The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app
   */
  resultType?: string;
  /**
   * The date when the inspection gets scheduled.
   */
  scheduleDate?: string;
  /**
   * Indicates whether the scheduleEndTime is in the AM or PM.
   */
  scheduleEndAMPM?: 'AM' | 'PM';
  /**
   * The scheduled end time for the inspection.
   */
  scheduleEndTime?: string;
  /**
   * AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight.
   */
  scheduleStartAMPM?: 'AM' | 'PM';
  /**
   * The scheduled start time for the inspection.
   */
  scheduleStartTime?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The starting mileage for the inspection.
   */
  startMileage?: number;
  /**
   * The time when you started the inspection.
   */
  startTime?: string;
  /**
   * The inspection status. See [Get All Inspection Statuses](./api-settings.html#operation/v4.get.settings.inspections.statuses).
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The time block for the scheduled inspection.
   */
  submitAMPM?: string;
  /**
   * The date that the inspection was submitted.
   */
  submitDate?: string;
  /**
   * The time that a new inspection is submitted. Civic Platform generates this value.
   */
  submitTime?: string;
  /**
   * The total mileage for the inspection.
   */
  totalMileage?: number;
  /**
   * The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.
   */
  totalScore?: number;
  /**
   * The total amount of time used to do an inspection.
   */
  totalTime?: number;
  type?: InspectionTypeSimpleModel;
  /**
   * The number of time units (see timeUnitDuration) comprising an inspection.
   */
  unitNumber?: string;
  /**
   * The amount of time comprising the smallest time unit for conducting an inspection.
   */
  units?: number;
  /**
   * A number, such as the license plate number or VIN, that identifies the vehicle used to complete an inspection.
   */
  vehicleId?: string;
};

export type InspectionContactModel = {
  address?: OwnerAddressModel;
  /**
   * The city of birth for an individual.
   */
  birthCity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The birth date.
   */
  birthDate?: string;
  /**
   * The country of birth or region of birth for an individual.
   */
  birthRegion?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The state of birth for an individual.
   */
  birthState?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A secondary business name for the applicable individual.
   */
  businessName?: string;
  /**
   * A comment about the inspection contact.
   */
  comment?: string;
  /**
   * The deceased date.
   */
  deceasedDate?: string;
  /**
   * The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.
   */
  driverLicenseNumber?: string;
  /**
   * The state that issued the driver's license.
   */
  driverLicenseState?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's email address.
   */
  email?: string;
  /**
   * The fax number for the contact.
   */
  fax?: string;
  /**
   * Fax Number Country Code
   */
  faxCountryCode?: string;
  /**
   * The Federal Employer Identification Number. It is used to identify a business for tax purposes.
   */
  federalEmployerId?: string;
  /**
   * The contact's first name.
   */
  firstName?: string;
  /**
   * The contact's full name.
   */
  fullName?: string;
  /**
   * The gender (male or female) of the individual.
   */
  gender?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.
   */
  individualOrOrganization?: string;
  /**
   * The last name (surname).
   */
  lastName?: string;
  /**
   * The middle name.
   */
  middleName?: string;
  /**
   * The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.
   */
  organizationName?: string;
  /**
   * The contact's passport number. This field is only active when the Contact Type selected is Individual.
   */
  passportNumber?: string;
  /**
   * The primary telephone number of the contact.
   */
  phone1?: string;
  /**
   * Phone Number 1 Country Code
   */
  phone1CountryCode?: string;
  /**
   * The secondary telephone number of the contact.
   */
  phone2?: string;
  /**
   * Phone Number 2 Country Code
   */
  phone2CountryCode?: string;
  /**
   * The tertiary telephone number for the contact.
   */
  phone3?: string;
  /**
   * Phone Number 3 Country Code
   */
  phone3CountryCode?: string;
  /**
   * The post office box number.
   */
  postOfficeBox?: string;
  /**
   * The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).
   */
  preferredChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).
   */
  race?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's relationship to the application or service request.
   */
  relation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).
   */
  salutation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The unique agency identifier
   */
  serviceProviderCode?: string;
  /**
   * The individual's social security number. This field is only active when the Contact Type selected is Individual.
   */
  socialSecurityNumber?: string;
  /**
   * The contact's state ID number. This field is only active when the Contact Type selected is Individual.
   */
  stateIdNumber?: string;
  /**
   * The contact status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact name suffix.
   */
  suffix?: string;
  /**
   * The individual's business title.
   */
  title?: string;
  /**
   * The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.
   */
  tradeName?: string;
  /**
   * The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).
   */
  type?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type InspectionRestrictionModel = {
  beforeScheduledTime?: InspectionBeforeScheduledTime;
};

export type InspectionTypeAssociationsModel = {
  /**
   * The name of the standard comment group associated with the inspection type.
   */
  standardCommentGroup?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
};

export type InspectionTypeSimpleModel = {
  group?: string;
  id?: number;
  /**
   * The IVR (Interactive Voice Response) number assigned to the inspection type.
   *
   * Added in Civic Platform 9.3.0
   */
  ivrNumber?: number;
  text?: string;
  value?: string;
};

export type InspectionTypeModel = {
  /**
   * Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections.
   */
  allowFailChecklistItems?: 'Y' | 'N';
  /**
   * Indicates whether or not to allow the scheduling of multiple inspections for this inspection type.
   */
  allowMultiInspections?: 'Y' | 'N';
  associations?: InspectionTypeAssociationsModel;
  cancelRestriction?: InspectionRestrictionModel;
  /**
   * Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet.
   *
   * NULL or empty string : Guidesheet items are not carried over.
   *
   * "A" : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item.
   */
  carryoverFlag?: 'A';
  defaultDepartment?: DepartmentModel;
  /**
   * The inspection disciplines assigned to the inspection type.
   */
  disciplines?: Array<string>;
  /**
   * Indicates whether or not to include the inspection in the inspection flow process.
   */
  flowEnabledFlag?: 'Y' | 'N';
  /**
   * The name of the inspection grade.
   */
  grade?: string;
  /**
   * The name of a group of inspection types.
   */
  group?: string;
  /**
   * The descriptive name associated to an inspection group code.
   */
  groupName?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  guideGroup?: RGuideSheetGroupModel;
  /**
   * Indicates whether or not the user can reschedule the inspection.
   */
  hasCancelPermission?: 'Y' | 'N';
  /**
   * Indicates whether or not to include the inspection in the inspection flow process.
   */
  hasFlowFlag?: 'Y' | 'N';
  /**
   * Indicates whether or not the next inspection can be scheduled in advance.
   */
  hasNextInspectionAdvance?: 'Y' | 'N';
  /**
   * Indicates whether or not the user can reschedule the inspection.
   */
  hasReschdulePermission?: 'Y' | 'N';
  /**
   * Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns "Y" if result.inspectionTypes.schdulePermission is either "REQUEST_ONLY_PENDING", "REQUEST_SAME_DAY_NEXT_DAY", or "SCHEDULE_USING_CALENDAR". If result.inspectionTypes.schdulePermission is "NONE" or null, hasSchdulePermission returns "N".
   */
  hasSchdulePermission?: 'Y' | 'N';
  /**
   * The inspection type system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * Indicates whether or not inspection result, grade or checklist can be edited.
   */
  inspectionEditable?: 'Y' | 'N';
  /**
   * Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.
   */
  isAutoAssign?: 'Y' | 'N';
  /**
   * Indicates whether or not the information is required.
   */
  isRequired?: 'Y' | 'N';
  /**
   * The IVR (Interactive Voice Response) number assigned to the inspection type.
   *
   * Added in Civic Platform 9.3.0
   */
  ivrNumber?: number;
  /**
   * The number of points allowed for an inspection, after which the inspection fails.
   */
  maxPoints?: number;
  /**
   * The priority level assigned to the inspection type.
   */
  priority?: string;
  /**
   * Indicates whether or not Accela Citizen Access users can view comment about the inspection results.
   */
  publicVisible?: 'Y' | 'N';
  /**
   * The reference number associated with an inspection.
   */
  refereceNumber?: string;
  rescheduleRestriction?: InspectionRestrictionModel;
  /**
   * The name of a grouping of Inspection results, usually indicative of a range of inspection scores.
   */
  resultGroup?: string;
  /**
   * Returns one of the scheduling permissions in Citizen Access:
   *
   * NONE - Does not allow public users to schedule this inspection type online.
   *
   * REQUEST_ONLY_PENDING - Only allows public users to request for an inspection online. The agency coordinates the appointment for the inspection date and time.
   *
   * REQUEST_SAME_DAY_NEXT_DAY - Allows public users to request an inspection for the same day, next day, or next available day, based on the inspection type calendar parameters defined on the inspection type.
   *
   * SCHEDULE_USING_CALENDAR - Allows public users to schedule inspections based on the availability on the inspection type calendar.
   */
  schdulePermission?: string;
  /**
   * The localized display text.
   */
  text?: string;
  /**
   * The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.
   */
  totalScore?: number;
  /**
   * Indicates the method for calculating total scores of checklist items. There are four options:
   *
   * TOTAL - Gets the total score of all checklists as the inspection score.
   *
   * MAX - Gets the max score of all checklists as the inspection score.
   *
   * MIN - Gets the min score of all checklists as the inspection score.
   *
   * AVG - Gets the average score of all checklists as the inspection score.
   *
   * SUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type.
   */
  totalScoreOption?: 'TOTAL' | 'MAX' | 'MIN' | 'AVG' | 'SUBTRACT';
  /**
   * The number of time units (see timeUnitDuration) comprising an inspection.
   */
  unitNumber?: string;
  /**
   * The amount of time comprising the smallest time unit for conducting an inspection.
   */
  units?: number;
  /**
   * The value for the specified parameter.
   */
  value?: string;
};

export type ResponseInvoiceModelArray = {
  result?: Array<InvoiceModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type InvoiceModel = {
  /**
   * The invoice fee amount.
   */
  amount?: number;
  /**
   * The audit status of the invoice fee item.
   */
  auditStatus?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * The invoice due date.
   */
  dueDate?: string;
  fees?: Array<FeeItemModel>;
  /**
   * The unique id of the invoice.
   */
  id?: number;
  /**
   * The invoice batch date.
   */
  invBatchDate?: string;
  /**
   * A comment related to the invoice.
   */
  invComment?: string;
  /**
   * The invoice status.
   */
  invStatus?: string;
  /**
   * The invoice date.
   */
  invoiceDate?: string;
  /**
   * The invoice number string.
   */
  invoiceNumber?: string;
  /**
   * Indicates whether or not the invoice is printed.
   */
  printed?: 'Y' | 'N';
  recordId?: RecordIdModel;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * Invoice user defined field 1.
   */
  udf1?: string;
  /**
   * Invoice user defined field 2.
   */
  udf2?: string;
  /**
   * Invoice user defined field 3.
   */
  udf3?: string;
  /**
   * Invoice user defined field 4.
   */
  udf4?: string;
};

export type ResponseLicenseProfessionalModelArray = {
  result?: Array<LicenseProfessionalModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ResponseLicenseProfessionalModel = {
  result?: LicenseProfessionalModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type LicenseProfessionalModel = {
  /**
   * The first line of the address.
   */
  addressLine1?: string;
  /**
   * The second line of the address.
   */
  addressLine2?: string;
  /**
   * The third line of the address.
   */
  addressLine3?: string;
  /**
   * The birth date of an individual.
   */
  birthDate?: string;
  /**
   * The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types.
   */
  businessLicense?: string;
  /**
   * A business name for the applicable individual.
   */
  businessName?: string;
  /**
   * A secondary business name for the applicable individual.
   */
  businessName2?: string;
  /**
   * The name of the city.
   */
  city?: string;
  /**
   * Comments or notes about the current context.
   */
  comment?: string;
  /**
   * The name of the country.
   */
  country?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The contact's email address.
   */
  email?: string;
  /**
   * The license expiration date.
   */
  expirationDate?: string;
  /**
   * The fax number for the contact.
   */
  fax?: string;
  /**
   * The Federal Employer Identification Number. It is used to identify a business for tax purposes.
   */
  federalEmployerId?: string;
  /**
   * The licensed professional's first name.
   */
  firstName?: string;
  /**
   * The licensed professional's full name.
   */
  fullName?: string;
  /**
   * The gender (male or female) of the individual.
   */
  gender?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The licensed professional system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * Indicates whether or not to designate the professional as the primary professional.
   */
  isPrimary?: string;
  /**
   * The licensed professional's last name.
   */
  lastName?: string;
  /**
   * The last date for a professionals renewal license.
   */
  lastRenewalDate?: string;
  /**
   * The licensed professional's license number.
   */
  licenseNumber?: string;
  /**
   * The type of license held by the professional.
   */
  licenseType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The name of the licensing board that issued the license.
   */
  licensingBoard?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The licensed professional's middle name.
   */
  middleName?: string;
  /**
   * The original issuance date of license.
   */
  originalIssueDate?: string;
  /**
   * The primary phone number of the contact.
   */
  phone1?: string;
  /**
   * The secondary phone number of the contact.
   */
  phone2?: string;
  /**
   * The tertiary phone number for the contact.
   */
  phone3?: string;
  /**
   * The post office box number.
   */
  postOfficeBox?: string;
  /**
   * The postal ZIP code for the address.
   */
  postalCode?: string;
  recordId?: RecordIdModel;
  /**
   * The unique Id generated for a professional stored in the system.
   */
  referenceLicenseId?: string;
  /**
   * The salutation to be used when addressing the contact; for example Mr. or Ms. This field is active only when Contact Type = Individual.
   */
  salutation?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The state corresponding to the address on record.
   */
  state?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The licensed professional's name suffix.
   */
  suffix?: string;
  /**
   * The individual's professional title.
   */
  title?: string;
};

export type NoticeConditionModel = {
  actionbyDepartment?: IdentifierModel;
  actionbyUser?: IdentifierModel;
  activeStatus?: IdentifierModel;
  additionalInformation?: string;
  additionalInformationPlainText?: string;
  agencyListSQL?: string;
  appliedDate?: string;
  appliedbyDepartment?: IdentifierModel;
  appliedbyUser?: IdentifierModel;
  dispAdditionalInformationPlainText?: string;
  displayNoticeInAgency?: boolean;
  displayNoticeInCitizens?: boolean;
  displayNoticeInCitizensFee?: boolean;
  displayOrder?: number;
  effectiveDate?: string;
  expirationDate?: string;
  group?: IdentifierModel;
  id?: number;
  inheritable?: IdentifierModel;
  isIncludeNameInNotice?: boolean;
  isIncludeShortCommentsInNotice?: boolean;
  longComments?: string;
  name?: string;
  priority?: IdentifierModel;
  publicDisplayMessage?: string;
  recordId?: CapIdModel;
  resAdditionalInformationPlainText?: string;
  resolutionAction?: string;
  serviceProviderCode?: string;
  serviceProviderCodes?: string;
  severity?: IdentifierModel;
  shortComments?: string;
  status?: IdentifierModel;
  statusDate?: string;
  statusType?: string;
  type?: IdentifierModel;
};

export type OwnerAddressModel = {
  addressLine1?: string;
  addressLine2?: string;
  addressLine3?: string;
  city?: string;
  country?: IdentifierModel;
  postalCode?: string;
  state?: IdentifierModel;
};

export type ParcelModel1 = {
  block?: string;
  book?: string;
  censusTract?: string;
  councilDistrict?: string;
  exemptionValue?: number;
  gisSequenceNumber?: number;
  id?: string;
  improvedValue?: number;
  isPrimary?: string;
  landValue?: number;
  legalDescription?: string;
  lot?: string;
  mapNumber?: string;
  mapReferenceInfo?: string;
  page?: string;
  parcel?: string;
  parcelArea?: number;
  parcelNumber?: string;
  planArea?: string;
  range?: string;
  section?: number;
  status?: IdentifierModel;
  subdivision?: IdentifierModel;
  supervisorDistrict?: string;
  township?: string;
  tract?: string;
};

export type ResponsePartTransactionModelArray = {
  result?: Array<PartTransactionModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type PartTransactionModel = {
  /**
   * The budget account name associated with the part transaction.
   */
  accountName?: string;
  /**
   * The budget account number associated with the part transaction.
   */
  accountNumber?: string;
  /**
   * Comments or notes about the current context.
   */
  comments?: string;
  /**
   * The total cost of the part transaction.
   */
  costTotal?: number;
  /**
   * Indicates whether or not the part transaction is a hard reservation. "Y": A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. "N" : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change.
   */
  hardReservation?: 'Y' | 'N';
  /**
   * The part transaction system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The location ID associated with the part transaction.
   */
  locationId?: number;
  /**
   * The name of the part bin.
   */
  partBin?: string;
  /**
   * The name of the part brand.
   */
  partBrand?: string;
  /**
   * The description of the part.
   */
  partDescription?: string;
  /**
   * The part ID.
   */
  partId?: number;
  /**
   * The location of the part.
   */
  partLocation?: string;
  /**
   * The number of the part.
   */
  partNumber?: string;
  /**
   * The number of units for which the same fee applies.
   */
  quantity?: number;
  recordId?: RecordIdModel;
  resToPartLocation?: string;
  /**
   * The part reservation number.
   */
  reservationNumber?: number;
  /**
   * The status of the part reservation.
   */
  reservationStatus?: string;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The part transaction status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the part is taxable.
   */
  taxable?: 'Y' | 'N';
  /**
   * The part transaction cost.
   */
  transactionCost?: number;
  /**
   * The part transaction date.
   */
  transactionDate?: string;
  /**
   * The part transaction type. Possible values:
   *
   * "Issue" : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part.
   *
   * "Receive" : occurs when someone purchases a part or returns a part to a location.
   *
   * "Transfer" : occurs when someone moves a part from one location to another.
   *
   * "Adjust" : occurs when someone makes quantity adjustments for cycle counts.
   *
   * "Reserve" : occurs when someone sets aside parts so they can issue them at a later date.
   */
  transactionType?: 'Issue' | 'Receive' | 'Transfer' | 'Adjust' | 'Reserve';
  type?: {
    /**
     * The part transaction type.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The unit cost per part.
   */
  unitCost?: number;
  /**
   * The unit of measurement for quantifying the part.
   */
  unitMeasurement?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The user who last updated the checklist or checklist item.
   */
  updatedBy?: string;
  /**
   * The work order task code associated with the part transactionmodel.
   */
  workOrderTaskCode?: string;
  /**
   * The work order task code index associated with the part transactionmodel.
   */
  workOrderTaskCodeIndex?: number;
};

export type ResponsePaymentModelArray = {
  result?: Array<PaymentModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type PaymentModel = {
  /**
   * The amount of a payment transaction or account balance.
   */
  amount?: number;
  /**
   * The payment amount which has not been allocated.
   */
  amountNotAllocated?: number;
  /**
   * The unique ID associated with the cashier.
   */
  cashierId?: string;
  /**
   * The payment system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * The date a payment was entered into the system.
   */
  paymentDate?: string;
  /**
   * Describes the method of payment, for example; credit card, cash, debit card, and so forth.
   */
  paymentMethod?: string;
  /**
   * Indicates whether or not a payment has been made in full.
   */
  paymentStatus?: string;
  /**
   * The unique ID generated for the recipient.
   */
  receiptId?: number;
  recordId?: RecordIdModel;
  /**
   * An industry standard code that identifies the type of transaction.
   */
  transactionCode?: string;
  /**
   * A unique number, assigned by the system, that indentifies the transaction.
   */
  transactionId?: number;
};

export type RGuideSheetGroupModel = {
  /**
   * The inspection checklist sytem id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The localized display text.
   */
  text?: string;
  /**
   * The stored value.
   */
  value?: string;
};

export type ResponseRecordAdditionalModelArray = {
  result?: Array<RecordAdditionalModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordAdditionalModel = {
  /**
   * The number of buildings associated with the record.
   */
  buildingCount?: number;
  /**
   * The US Census Bureau construction type code.
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The application's estimated value.
   */
  estimatedValue?: number;
  /**
   * The house unit associated with the application.
   */
  houseUnit?: number;
  /**
   * A flag that indicates whether or not the public owns the item.
   */
  publicOwned?: string;
  recordId?: RecordIdSimpleModel;
};

export type ResponseRecordModelArray = {
  result?: Array<RecordApoCustomFormsModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordApoCustomFormsModel = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  addresses?: Array<RecordAddressCustomFormsModel>;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  assets?: Array<AssetMasterModel>;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The staff member responsible for closure.
   */
  closedByUser?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * The staff member responsible for completion.
   */
  completedByUser?: string;
  conditionOfApprovals?: Array<CapConditionModel2>;
  conditions?: Array<NoticeConditionModel>;
  /**
   * The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  contact?: Array<RecordContactSimpleModel>;
  /**
   * The cost for one unit associated to the record.
   */
  costPerUnit?: number;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  /**
   * Indictes whether or not the record was cloned.
   */
  createdByCloning?: 'Y' | 'N';
  customForms?: Array<CustomAttributeModel>;
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  customTables?: Array<TableModel>;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * Name of the enforcement officer.
   */
  enforceUser?: string;
  /**
   * ID number of the enforcement officer.
   */
  enforceUserId?: string;
  /**
   * The estimated cost per unit.
   */
  estimatedCostPerUnit?: number;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * The number of housing units.
   */
  housingUnits?: number;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The Civic Platform product  where the application is submitted: "AA" : Classic Accela Automation. "ACA" : Accela Citizen Access. "AIVR" : Accela Integrated Voice Response. "AMO" : Accela Mobile Office. "AV360" : Accela Asset Management, Accela Land Management.
   */
  initiatedProduct?: string;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * The number of buildings.
   */
  numberOfBuildings?: number;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  /**
   * The date the application was opened.
   */
  openedDate?: string;
  /**
   * The amount of elapsed time from the time tracking start date to the completion of the application.
   */
  overallApplicationTime?: number;
  owner?: Array<RefOwnerModel>;
  parcel?: Array<ParcelModel1>;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  professional?: Array<LicenseProfessionalModel>;
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  /**
   * General information about the record.
   */
  recordClass?: string;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date the complaint was reported.
   */
  reportedDate?: string;
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The record status type.
   */
  statusType?:
    | 'APPROVED'
    | 'CLOSED'
    | 'COMPLETE'
    | 'DENIED'
    | 'INCOMPLETE'
    | 'OPEN'
    | 'PENDING'
    | 'UNASSIGNED'
    | 'VOID';
  /**
   * The total amount of the fees invoiced to the record.
   */
  totalFee?: number;
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalJobCost?: number;
  /**
   * The total amount of pay.
   */
  totalPay?: number;
  /**
   * The application tracking number (IVR tracking number).
   */
  trackingId?: number;
  type?: RecordTypeModel;
  /**
   * The undistributed costs for this work order.
   */
  undistributedCost?: number;
  /**
   * The last update date.
   */
  updateDate?: string;
  /**
   * The record value.
   */
  value?: string;
};

export type RecordModel = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  addresses?: Array<RecordAddressModel>;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  assets?: Array<AssetMasterModel>;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The staff member responsible for closure.
   */
  closedByUser?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * The staff member responsible for completion.
   */
  completedByUser?: string;
  conditionOfApprovals?: Array<CapConditionModel2>;
  conditions?: Array<NoticeConditionModel>;
  /**
   * The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  contact?: Array<RecordContactSimpleModel>;
  /**
   * The cost for one unit associated to the record.
   */
  costPerUnit?: number;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  /**
   * Indictes whether or not the record was cloned.
   */
  createdByCloning?: 'Y' | 'N';
  customForms?: Array<CustomAttributeModel>;
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  customTables?: Array<TableModel>;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * Name of the enforcement officer.
   */
  enforceUser?: string;
  /**
   * ID number of the enforcement officer.
   */
  enforceUserId?: string;
  /**
   * The estimated cost per unit.
   */
  estimatedCostPerUnit?: number;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * The number of housing units.
   */
  housingUnits?: number;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The Civic Platform product  where the application is submitted: "AA" : Classic Accela Automation. "ACA" : Accela Citizen Access. "AIVR" : Accela Integrated Voice Response. "AMO" : Accela Mobile Office. "AV360" : Accela Asset Management, Accela Land Management.
   */
  initiatedProduct?: string;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * The number of buildings.
   */
  numberOfBuildings?: number;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  /**
   * The date the application was opened.
   */
  openedDate?: string;
  /**
   * The amount of elapsed time from the time tracking start date to the completion of the application.
   */
  overallApplicationTime?: number;
  owner?: Array<RefOwnerModel>;
  parcel?: Array<ParcelModel1>;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  professional?: Array<LicenseProfessionalModel>;
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  /**
   * General information about the record.
   */
  recordClass?: string;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date the complaint was reported.
   */
  reportedDate?: string;
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The record status type.
   */
  statusType?:
    | 'APPROVED'
    | 'CLOSED'
    | 'COMPLETE'
    | 'DENIED'
    | 'INCOMPLETE'
    | 'OPEN'
    | 'PENDING'
    | 'UNASSIGNED'
    | 'VOID';
  /**
   * The total amount of the fees invoiced to the record.
   */
  totalFee?: number;
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalJobCost?: number;
  /**
   * The total amount of pay.
   */
  totalPay?: number;
  /**
   * The application tracking number (IVR tracking number).
   */
  trackingId?: number;
  type?: RecordTypeModel;
  /**
   * The undistributed costs for this work order.
   */
  undistributedCost?: number;
  /**
   * The last update date.
   */
  updateDate?: string;
  /**
   * The record value.
   */
  value?: string;
};

export type RequestCreateRecordModel = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  addresses?: Array<RecordAddressModel>;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The staff member responsible for closure.
   */
  closedByUser?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * The staff member responsible for completion.
   */
  completedByUser?: string;
  conditionOfApprovals?: Array<CapConditionModel2>;
  conditions?: Array<NoticeConditionModel>;
  /**
   * The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  contacts?: Array<RecordContactSimpleModel>;
  /**
   * The cost for one unit associated to the record.
   */
  costPerUnit?: number;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  /**
   * Indictes whether or not the record was cloned.
   */
  createdByCloning?: 'Y' | 'N';
  customForms?: Array<CustomAttributeModel>;
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  customTables?: Array<TableModel>;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * Name of the enforcement officer.
   */
  enforceUser?: string;
  /**
   * ID number of the enforcement officer.
   */
  enforceUserId?: string;
  /**
   * The estimated cost per unit.
   */
  estimatedCostPerUnit?: number;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * The number of housing units.
   */
  housingUnits?: number;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The product or app that created the record. If initiatedProduct is null or not specified in the request, the default is "AV360" (Civic Platform application).
   *
   * Added in Civic Platform version: 9.2.0
   */
  initiatedProduct?: string;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * The number of buildings.
   */
  numberOfBuildings?: number;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  /**
   * The date the application was opened.
   */
  openedDate?: string;
  /**
   * The amount of elapsed time from the time tracking start date to the completion of the application.
   */
  overallApplicationTime?: number;
  owners?: Array<RefOwnerModel>;
  parcels?: Array<ParcelModel1>;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  professionals?: Array<LicenseProfessionalModel>;
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  /**
   * General information about the record.
   */
  recordClass?: string;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The record status type.
   */
  statusType?:
    | 'APPROVED'
    | 'CLOSED'
    | 'COMPLETE'
    | 'DENIED'
    | 'INCOMPLETE'
    | 'OPEN'
    | 'PENDING'
    | 'UNASSIGNED'
    | 'VOID';
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalJobCost?: number;
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalPay?: number;
  /**
   * The total amount of pay.
   */
  trackingId?: number;
  type?: RecordTypeModel;
  /**
   * The undistributed costs for this work order.
   */
  undistributedCost?: number;
  /**
   * The last update date.
   */
  updateDate?: string;
};

export type ResponseRecordExtModel1Array = {
  result?: Array<RecordExtModel1>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordExtModel1 = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  addresses?: Array<RecordAddressCustomFormsModel>;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The staff member responsible for closure.
   */
  closedByUser?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * The staff member responsible for completion.
   */
  completedByUser?: string;
  conditionOfApprovals?: Array<CapConditionModel2>;
  conditions?: Array<NoticeConditionModel>;
  /**
   * The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  contacts?: Array<RecordContactSimpleModel>;
  /**
   * The cost for one unit associated to the record.
   */
  costPerUnit?: number;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  customForms?: Array<CustomAttributeModel>;
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  customTables?: Array<TableModel>;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * Name of the enforcement officer.
   */
  enforceUser?: string;
  /**
   * ID number of the enforcement officer.
   */
  enforceUserId?: string;
  /**
   * The estimated cost per unit.
   */
  estimatedCostPerUnit?: number;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * The number of housing units.
   */
  housingUnits?: number;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The Civic Platform product  where the application is submitted: "AA" : Classic Accela Automation. "ACA" : Accela Citizen Access. "AIVR" : Accela Integrated Voice Response. "AMO" : Accela Mobile Office. "AV360" : Accela Asset Management, Accela Land Management.
   */
  initiatedProduct?: string;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * The number of buildings.
   */
  numberOfBuildings?: number;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  /**
   * The date the application was opened.
   */
  openedDate?: string;
  /**
   * The amount of elapsed time from the time tracking start date to the completion of the application.
   */
  overallApplicationTime?: number;
  owners?: Array<RefOwnerModel>;
  parcels?: Array<ParcelModel1>;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  professionals?: Array<LicenseProfessionalModel>;
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  /**
   * General information about the record.
   */
  recordClass?: string;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The record status type.
   */
  statusType?:
    | 'APPROVED'
    | 'CLOSED'
    | 'COMPLETE'
    | 'DENIED'
    | 'INCOMPLETE'
    | 'OPEN'
    | 'PENDING'
    | 'UNASSIGNED'
    | 'VOID';
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalJobCost?: number;
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalPay?: number;
  /**
   * The total amount of pay.
   */
  trackingId?: number;
  type?: RecordTypeModel;
  /**
   * The undistributed costs for this work order.
   */
  undistributedCost?: number;
  /**
   * The last update date.
   */
  updateDate?: string;
  value?: string;
};

export type RequestRecordModel = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  addresses?: Array<RecordAddressModel>;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: string;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The staff member responsible for closure.
   */
  closedByUser?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * The staff member responsible for completion.
   */
  completedByUser?: string;
  /**
   * The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  contact?: RecordContactModel;
  /**
   * The cost for one unit associated to the record.
   */
  costPerUnit?: number;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  /**
   * Indictes whether or not the record was cloned.
   */
  createdByCloning?: 'Y' | 'N';
  customForms?: Array<CustomAttributeModel>;
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  customTables?: Array<TableModel>;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * Name of the enforcement officer.
   */
  enforceUser?: string;
  /**
   * ID number of the enforcement officer.
   */
  enforceUserId?: string;
  /**
   * The estimated cost per unit.
   */
  estimatedCostPerUnit?: number;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * The number of housing units.
   */
  housingUnits?: number;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The product or app that created the record. If initiatedProduct is null or not specified in the request, the default is "AV360" (Civic Platform application).
   *
   * Added in Civic Platform version: 9.2.0
   */
  initiatedProduct?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * The number of buildings.
   */
  numberOfBuildings?: number;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  owner?: Array<RefOwnerModel>;
  parcel?: Array<ParcelModel1>;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  professional?: Array<LicenseProfessionalModel>;
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  /**
   * General information about the record.
   */
  recordClass?: string;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date the complaint was reported.
   */
  reportedDate?: string;
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalJobCost?: number;
  type?: RecordTypeModel;
  /**
   * The undistributed costs for this work order.
   */
  undistributedCost?: number;
};

export type ResponseSimpleRecordModelArray = {
  result?: Array<SimpleRecordModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ResponseSimpleRecordModel = {
  result?: SimpleRecordModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type SimpleRecordModel = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The staff member responsible for closure.
   */
  closedByUser?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * The staff member responsible for completion.
   */
  completedByUser?: string;
  /**
   * The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).
   */
  constructionType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The cost for one unit associated to the record.
   */
  costPerUnit?: number;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  /**
   * Indictes whether or not the record was cloned.
   */
  createdByCloning?: 'Y' | 'N';
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * Name of the enforcement officer.
   */
  enforceUser?: string;
  /**
   * ID number of the enforcement officer.
   */
  enforceUserId?: string;
  /**
   * The estimated cost per unit.
   */
  estimatedCostPerUnit?: number;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * The number of housing units.
   */
  housingUnits?: number;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The Civic Platform product  where the application is submitted: "AA" : Classic Accela Automation. "ACA" : Accela Citizen Access. "AIVR" : Accela Integrated Voice Response. "AMO" : Accela Mobile Office. "AV360" : Accela Asset Management, Accela Land Management.
   */
  initiatedProduct?: string;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).
   */
  module?: string;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * The number of buildings.
   */
  numberOfBuildings?: number;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  /**
   * The date the application was opened.
   */
  openedDate?: string;
  /**
   * The amount of elapsed time from the time tracking start date to the completion of the application.
   */
  overallApplicationTime?: number;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  /**
   * General information about the record.
   */
  recordClass?: string;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date the complaint was reported.
   */
  reportedDate?: string;
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * The unique agency identifier,
   */
  serviceProviderCode?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The total amount of the fees invoiced to the record.
   */
  totalFee?: number;
  /**
   * The combination of work order assignments (labor) and costs.
   */
  totalJobCost?: number;
  /**
   * The total amount of pay.
   */
  totalPay?: number;
  /**
   * The application tracking number (IVR tracking number).
   */
  trackingId?: number;
  type?: RecordTypeModel;
  /**
   * The undistributed costs for this work order.
   */
  undistributedCost?: number;
  /**
   * The record value.
   */
  value?: string;
};

export type RequestSimpleRecordModel = {
  /**
   * Estimated cost per production unit.
   */
  actualProductionUnit?: number;
  /**
   * The date for a hearing appearance.
   */
  appearanceDate?: string;
  /**
   * The day for a hearing appearance.
   */
  appearanceDayOfWeek?: string;
  /**
   * The date the application was assigned.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  assignedToDepartment?: string;
  /**
   * The amount due.
   */
  balance?: number;
  /**
   * Indicates whether or not there was a booking in addition to a citation.
   */
  booking?: boolean;
  /**
   * The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  closedByDepartment?: string;
  /**
   * The date the application was closed.
   */
  closedDate?: string;
  /**
   * The date the application was completed.
   */
  completeDate?: string;
  /**
   * The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  completedByDepartment?: string;
  /**
   * Indicates whether or not a defendant's signature has been obtained.
   */
  defendantSignature?: boolean;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  enforceDepartment?: string;
  /**
   * The estimated number of production units.
   */
  estimatedProductionUnit?: number;
  /**
   * The estimated cost of the job.
   */
  estimatedTotalJobCost?: number;
  /**
   * The first issued date for license
   */
  firstIssuedDate?: string;
  /**
   * Indicates whether or not an infraction occurred.
   */
  infraction?: boolean;
  /**
   * The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).
   */
  inspectorDepartment?: string;
  /**
   * The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorId?: string;
  /**
   * The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
   */
  inspectorName?: string;
  /**
   * The value of the job.
   */
  jobValue?: number;
  /**
   * Indicates whether or not a misdemeanor occurred.
   */
  misdemeanor?: boolean;
  /**
   * The name associated to the record.
   */
  name?: string;
  /**
   * Indicates whether or not  there was a witness to the alleged offense.
   */
  offenseWitnessed?: boolean;
  /**
   * The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).
   */
  priority?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the record is for the public.
   */
  publicOwned?: boolean;
  renewalInfo?: RecordExpirationModel;
  /**
   * The incoming channel through which the applicant submitted the application.
   */
  reportedChannel?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date the complaint was reported.
   */
  reportedDate?: string;
  /**
   * The type of complaint or incident being reported.
   */
  reportedType?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the inspection gets scheduled.
   */
  scheduledDate?: string;
  /**
   * Indicates the severity of the condition.
   */
  severity?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * A brief note about the record subject.
   */
  shortNotes?: string;
  /**
   * The record status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * 	The reason for the status setting on the record.
   */
  statusReason?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The total amount of the fees invoiced to the record.
   */
  totalFee?: number;
  /**
   * The total amount of pay.
   */
  totalPay?: number;
};

export type ResponseResultModelArray = {
  result?: Array<ResultModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ResponseResultModel = {
  result?: ResultModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ResultModel = {
  /**
   * The error code, if an error is encountered.
   */
  code?: string;
  /**
   * The system id of the object in this operation.
   */
  id?: number;
  /**
   * Indicates whether or not the operation on the object is successful.
   */
  isSuccess?: boolean;
  /**
   * The error message, if an error is encountered
   */
  message?: string;
};

export type ResponseRecordInspectionTypeModelArray = {
  result?: Array<RecordInspectionTypeModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordInspectionTypeModel = {
  inspectionTypes?: Array<InspectionTypeModel>;
  /**
   * The unique ID associated with a record.
   */
  recordId?: string;
};

export type ResponseRecordRelatedModelArray = {
  result?: Array<RecordRelatedModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RecordRelatedModel = {
  /**
   * An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.
   */
  customId?: string;
  /**
   * The record system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The type of relationship of a related record.
   */
  relationship?: 'parent' | 'child' | 'renewal';
  /**
   * The unique agency id.
   */
  serviceProveCode?: string;
  /**
   * The application tracking number (IVR tracking number).
   */
  trackingId?: number;
  type?: RecordTypeNoAliasModel;
};

export type ResponseRefOwnerModelArray = {
  result?: Array<RefOwnerModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ResponseRefOwnerModel = {
  result?: RefOwnerModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type RefOwnerModel = {
  /**
   * The contact's email address.
   */
  email?: string;
  /**
   * The fax number for the contact.
   */
  fax?: string;
  /**
   * The contact's first name. This field is only active when the Contact Type selected is Individual.
   */
  firstName?: string;
  /**
   * The contact's full name. This field is only active when the Contact Type selected is Individual.
   */
  fullName?: string;
  /**
   * The owner system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * Indicates whether or not to designate the owner as the primary owner.
   */
  isPrimary?: string;
  /**
   * The last name (surname).
   */
  lastName?: string;
  mailAddress?: OwnerAddressModel;
  /**
   * The contact's middle name.
   */
  middleName?: string;
  /**
   * The unique Id generated for a parcel.
   */
  parcelId?: string;
  /**
   * The telephone number of the owner.
   */
  phone?: string;
  /**
   * The country code for the assoicated phone number.
   */
  phoneCountryCode?: string;
  recordId?: RecordIdModel;
  /**
   * The reference owner id.
   */
  refOwnerId?: number;
  /**
   * The owner status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The owner's tax ID number.
   */
  taxId?: string;
  /**
   * The individual's business title.
   */
  title?: string;
  /**
   * The owner type.
   */
  type?: string;
};

export type RowModel = {
  /**
   * The requested operation on the row.
   */
  action?: 'add' | 'update' | 'delete';
  fields?: CustomAttributeModel;
  /**
   * The row id.
   */
  id?: string;
};

export type ResponseTableModelArray = {
  result?: Array<TableModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type TableModel = {
  /**
   * The custom table id.
   */
  id?: string;
  /**
   * A table row containing custom fields.
   */
  rows?: Array<RowModel>;
};

export type ResponseTaskItemModelArray = {
  result?: Array<TaskItemModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type ResponseTaskItemModel = {
  result?: TaskItemModel;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type TaskItemModel = {
  /**
   * The department responsible for the action.
   */
  actionbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual responsible for the action.
   */
  actionbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Used to indicate supervisory approval of an adhoc task.
   */
  approval?: string;
  /**
   * Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.
   */
  assignEmailDisplay?: string;
  /**
   * The date of the assigned action.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action.
   */
  assignedToDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the item is billable.
   */
  billable?: 'Y' | 'N';
  /**
   * Comments or notes about the current context.
   */
  comment?: string;
  /**
   * Indicates whether or not Accela Citizen Access users can view the inspection results comments.
   */
  commentDisplay?: string;
  /**
   * Specifies the type of user who can view the inspection result comments. <br/>"All ACA Users" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. <br/>"Record Creator Only" - the user who created the record can see the comments for the inspection results. <br/>"Record Creator and Licensed Professional" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.
   */
  commentPublicVisible?: Array<string>;
  /**
   * The ID of the current workflow task.
   */
  currentTaskId?: string;
  /**
   * The amount of time to complete a task (measured in days).
   */
  daysDue?: number;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * A note describing the disposition of the current task.
   */
  dispositionNote?: string;
  /**
   * The desired completion date of the task.
   */
  dueDate?: string;
  /**
   * The time the workflow task was completed.
   */
  endTime?: string;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated hours necessary to complete this task.
   */
  estimatedHours?: number;
  /**
   * Number of hours used for a workflow or workflow task.
   */
  hoursSpent?: number;
  /**
   * The workflow task system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not the workflow task is active.
   */
  isActive?: 'Y' | 'N';
  /**
   * Indicates whether or not the workflow task is completed.
   */
  isCompleted?: 'Y' | 'N';
  /**
   * The date when the task item was last changed.
   */
  lastModifiedDate?: string;
  /**
   * A string represents the date when the task item was last changed.
   */
  lastModifiedDateString?: string;
  /**
   * The id of the next task in a workflow.
   */
  nextTaskId?: string;
  /**
   * A labor cost factor that indicates time worked beyond a worker's regular working hours.
   */
  overTime?: string;
  /**
   * The process code for the next task in a workflow.
   */
  processCode?: string;
  recordId?: RecordIdModel;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The time the workflow task started.
   */
  startTime?: string;
  /**
   * The workflow task status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * The date that time tracking is set to begin.
   */
  trackStartDate?: string;
};

export type ResponseTaskItemActionModelArray = {
  result?: Array<TaskItemActionModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type TaskItemActionModel = {
  /**
   * Audit trail action type like "payment allocation"
   */
  action?: string;
  /**
   * The department responsible for the action.
   */
  actionbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual responsible for the action.
   */
  actionbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Used to indicate supervisory approval of an adhoc task.
   */
  approval?: string;
  /**
   * Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.
   */
  assignEmailDisplay?: string;
  /**
   * The date of the assigned action.
   */
  assignedDate?: string;
  /**
   * The department responsible for the action.
   */
  assignedToDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The staff member responsible for the action.
   */
  assignedUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Indicates whether or not the item is billable.
   */
  billable?: 'Y' | 'N';
  /**
   * Comments or notes about the current context.
   */
  comment?: string;
  /**
   * Indicates whether or not Accela Citizen Access users can view the inspection results comments.
   */
  commentDisplay?: string;
  /**
   * Specifies the type of user who can view the inspection result comments. <br/>"All ACA Users" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. <br/>"Record Creator Only" - the user who created the record can see the comments for the inspection results. <br/>"Record Creator and Licensed Professional" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.
   */
  commentPublicVisible?: Array<string>;
  /**
   * The ID of the current workflow task.
   */
  currentTaskId?: string;
  /**
   * The amount of time to complete a task (measured in days).
   */
  daysDue?: number;
  /**
   * The description of the record or item.
   */
  description?: string;
  /**
   * A note describing the disposition of the current task.
   */
  dispositionNote?: string;
  /**
   * The desired completion date of the task.
   */
  dueDate?: string;
  /**
   * The time the workflow task was completed.
   */
  endTime?: string;
  /**
   * The estimated date of completion.
   */
  estimatedDueDate?: string;
  /**
   * The estimated hours necessary to complete this task.
   */
  estimatedHours?: number;
  /**
   * Number of hours used for a workflow or workflow task.
   */
  hoursSpent?: number;
  /**
   * The workflow task system id assigned by the Civic Platform server.
   */
  id?: string;
  /**
   * The application level in possession time of the time tracking feature.
   */
  inPossessionTime?: number;
  /**
   * Indicates whether or not the workflow task is active.
   */
  isActive?: 'Y' | 'N';
  /**
   * Indicates whether or not the workflow task is completed.
   */
  isCompleted?: 'Y' | 'N';
  /**
   * The date when the task item was last changed.
   */
  lastModifiedDate?: string;
  /**
   * A string represents the date when the task item was last changed.
   */
  lastModifiedDateString?: string;
  /**
   * The id of the next task in a workflow.
   */
  nextTaskId?: string;
  /**
   * A labor cost factor that indicates time worked beyond a worker's regular working hours.
   */
  overTime?: string;
  /**
   * The process code for the next task in a workflow.
   */
  processCode?: string;
  recordId?: RecordIdModel;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The time the workflow task started.
   */
  startTime?: string;
  /**
   * The workflow task status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
  /**
   * The date that time tracking is set to begin.
   */
  trackStartDate?: string;
};

export type RequestTaskItemModel = {
  /**
   * The department responsible for the action.
   */
  actionbyDepartment?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The individual responsible for the action.
   */
  actionbyUser?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * Used to indicate supervisory approval of an adhoc task.
   */
  approval?: string;
  /**
   * Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.
   */
  assignEmailDisplay?: string;
  /**
   * Indicates whether or not the item is billable.
   */
  billable?: 'Y' | 'N';
  /**
   * Comments or notes about the current context.
   */
  comment?: string;
  /**
   * Indicates whether or not Accela Citizen Access users can view the inspection results comments.
   */
  commentDisplay?: string;
  /**
   * Specifies the type of user who can view the inspection result comments. <br/>"All ACA Users" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. <br/>"Record Creator Only" - the user who created the record can see the comments for the inspection results. <br/>"Record Creator and Licensed Professional" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.
   */
  commentPublicVisible?: Array<string>;
  /**
   * The desired completion date of the task.
   */
  dueDate?: string;
  /**
   * The time the workflow task was completed.
   */
  endTime?: string;
  /**
   * Number of hours used for a workflow or workflow task.
   */
  hoursSpent?: number;
  /**
   * A labor cost factor that indicates time worked beyond a worker's regular working hours.
   */
  overTime?: string;
  /**
   * The time the workflow task started.
   */
  startTime?: string;
  /**
   * The workflow task status.
   */
  status?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The date when the current status changed.
   */
  statusDate?: string;
};

export type ResponseTrustAccountModelArray = {
  result?: Array<TrustAccountModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type TrustAccountModel = {
  /**
   * The account ID number for the trust account.
   */
  account?: string;
  /**
   * The trust account associations.
   */
  associations?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The balance of the trust account in dollars.
   */
  balance?: number;
  /**
   * The description of the trust account.
   */
  description?: string;
  /**
   * The trust account system id assigned by the Civic Platform server.
   */
  id?: number;
  /**
   * Indicates whether or not to designate the trust account as the primary source.
   */
  isPrimary?: 'Y' | 'N';
  /**
   * The ledger account of the trust account.
   */
  ledgerAccount?: string;
  /**
   * Indicates whether or not the trust account can use the overdraft option.
   */
  overdraft?: {
    /**
     * The localized display value.
     */
    text?: string;
    /**
     * The data value.
     */
    value?: string;
  };
  /**
   * The overdraft limit amount, in dollars, for the trust account.
   */
  overdraftLimit?: number;
  recordId?: RecordIdModel;
  /**
   * The unique agency identifier.
   */
  serviceProviderCode?: string;
  /**
   * The status of the trust account.
   */
  status?: 'Active' | 'Closed';
  /**
   * The minimum amount required in a trust account.
   */
  thresholdAmount?: number;
};

export type UserRolePrivilegeModel = {
  /**
   * Indicates whether or not the permission is given to a contact.
   */
  contactAllowed?: boolean;
  /**
   * Indicates whether or not the permission to delete a document is allowed.
   */
  deleteAllowed?: boolean;
  /**
   * Indicates whether or not the permission to download a document is allowed.
   */
  downloadAllowed?: boolean;
  licenseTypeRules?: Array<string>;
  /**
   * Indicates whether or not the permission is given to a licensed professional.
   */
  licensendProfessionalAllowed?: boolean;
  /**
   * Indicates whether or not the permission is given to an owner.
   */
  ownerAllowed?: boolean;
  /**
   * Indicates whether or not the permission is given to a record creator.
   */
  recordCreatorAllowed?: boolean;
  /**
   * Indicates whether or not the permission is given to a registered public user.
   */
  registeredUserAllowed?: boolean;
  /**
   * Indicates whether or not the permission to view a document name is allowed.
   */
  titleViewAllowed?: boolean;
  /**
   * Indicates whether or not the permission to upload a document is allowed.
   */
  uploadAllowed?: boolean;
};

export type VoteRequest = {
  /**
   * The vote on a record (agenda item in a hearing, for example). A value of true is a "yea" vote and a value of false indicates a "nay" vote.
   */
  vote: boolean;
};

export type ResponseVoteResult = {
  result?: VoteResult;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type VoteResult = {
  /**
   * The result of a vote on a record (agenda item in a hearing, for example). A value of true is a "yea" vote and a value of false indicates a "nay" vote.
   */
  vote?: boolean;
};

export type ResponseVoteSummary = {
  result?: VoteSummary;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type VoteSummary = {
  /**
   * The number of votes that disapprove the specified record.
   */
  downCount?: number;
  /**
   * The number of votes that approve the specified record.
   */
  upCount?: number;
};

export type ResponseWorkflowTaskCommentModelArray = {
  result?: Array<WorkflowTaskCommentModel>;
  /**
   * The HTTP return status.
   */
  status?: number;
};

export type WorkflowTaskCommentModel = {
  /**
   * Audit trail action type like 'payment allocation'
   */
  action?: string;
  /**
   * The unique user id of the individual that created the entry.
   */
  createdBy?: string;
  /**
   * The date the entry was created.
   */
  createdDate?: string;
  recordId?: RecordIdModel;
  /**
   * The comment text.
   */
  text?: string;
  /**
   * The id of the workflow task.
   */
  workflowTaskId?: string;
};

export type AppControllerGetHelloData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/';
};

export type AppControllerGetHelloResponses = {
  200: unknown;
};

export type RoleControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/role';
};

export type RoleControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: Array<Role>;
};

export type RoleControllerFindAllResponse =
  RoleControllerFindAllResponses[keyof RoleControllerFindAllResponses];

export type RoleControllerCreateData = {
  body?: CreateRoleDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/role';
};

export type RoleControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: Role;
};

export type RoleControllerCreateResponse =
  RoleControllerCreateResponses[keyof RoleControllerCreateResponses];

export type RoleControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/role/{id}';
};

export type RoleControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type RoleControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/role/{id}';
};

export type RoleControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: Role;
};

export type RoleControllerFindOneResponse =
  RoleControllerFindOneResponses[keyof RoleControllerFindOneResponses];

export type RoleControllerUpdateData = {
  body?: UpdateRoleDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/role/{id}';
};

export type RoleControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: Role;
};

export type RoleControllerUpdateResponse =
  RoleControllerUpdateResponses[keyof RoleControllerUpdateResponses];

export type ConfigControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/config';
};

export type ConfigControllerFindAllErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type ConfigControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id: number;
        key: string;
        value: string;
        description: string;
        type: string;
        group: string;
        public: boolean;
        createdAt: string;
        updatedAt: string;
      }>;
    };
  };
};

export type ConfigControllerFindAllResponse =
  ConfigControllerFindAllResponses[keyof ConfigControllerFindAllResponses];

export type ConfigControllerUpdateAllData = {
  body?: Array<string>;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/config';
};

export type ConfigControllerUpdateAllErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type ConfigControllerUpdateAllResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type ConfigControllerCreateData = {
  body?: CreateConfigDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/config';
};

export type ConfigControllerCreateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type ConfigControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: unknown;
};

export type ConfigControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置ID
     */
    id: number;
  };
  query?: never;
  url: '/config/{id}';
};

export type ConfigControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 配置不存在
   */
  404: unknown;
};

export type ConfigControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type ConfigControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置ID
     */
    id: number;
  };
  query?: never;
  url: '/config/{id}';
};

export type ConfigControllerFindOneErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 配置不存在
   */
  404: unknown;
};

export type ConfigControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type ConfigControllerUpdateData = {
  body?: UpdateConfigDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置ID
     */
    id: number;
  };
  query?: never;
  url: '/config/{id}';
};

export type ConfigControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 配置不存在
   */
  404: unknown;
};

export type ConfigControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type ConfigControllerFindByGroupData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置分组
     */
    group: string;
  };
  query?: never;
  url: '/config/group/{group}';
};

export type ConfigControllerFindByGroupErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type ConfigControllerFindByGroupResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type ConfigControllerUpdateGroupData = {
  body?: Array<string>;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置分组
     */
    group: string;
  };
  query?: never;
  url: '/config/group/{group}';
};

export type ConfigControllerUpdateGroupErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type ConfigControllerUpdateGroupResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type ConfigControllerFindByKeyData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置键
     */
    key: string;
  };
  query?: never;
  url: '/config/key/{key}';
};

export type ConfigControllerFindByKeyErrors = {
  /**
   * 配置不存在
   */
  404: unknown;
};

export type ConfigControllerFindByKeyResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type ConfigControllerUpdateByKeyData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 配置键
     */
    key: string;
  };
  query?: never;
  url: '/config/key/{key}';
};

export type ConfigControllerUpdateByKeyErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 配置不存在
   */
  404: unknown;
};

export type ConfigControllerUpdateByKeyResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type ConfigControllerGetSystemInfoData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/config/system/info';
};

export type ConfigControllerGetSystemInfoResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type ConfigControllerGetPublicData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/config/public';
};

export type ConfigControllerGetPublicResponses = {
  200: {
    code: number;
    message: string;
    data: {
      site_name: string;
      site_description: string;
      site_keywords: string;
      site_logo: string;
      site_favicon: string;
      user_registration_enabled: boolean;
      user_email_verification: boolean;
      comment_approval_required: boolean;
      article_approval_required: boolean;
      maintenance_mode: boolean;
      maintenance_message: string;
      invite_code_required: boolean;
      invite_code_enabled: boolean;
      site_subname: string;
    };
  };
};

export type ConfigControllerGetPublicResponse =
  ConfigControllerGetPublicResponses[keyof ConfigControllerGetPublicResponses];

export type UserControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
    username?: string;
  };
  url: '/user';
};

export type UserControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id?: number;
        username?: string;
        nickname?: string;
        status?: string;
        avatar?: string;
        description?: unknown;
        roles?: Array<{
          id?: number;
          name?: string;
          displayName?: unknown;
          description?: string;
          permissions?: Array<{
            id: number;
            name: string;
            description: string;
          }>;
          createdAt?: string;
          updatedAt?: string;
        }>;
        config?: unknown;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type UserControllerFindAllResponse =
  UserControllerFindAllResponses[keyof UserControllerFindAllResponses];

export type UserControllerCreateData = {
  body?: CreateUserDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user';
};

export type UserControllerCreateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type UserControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: unknown;
};

export type UserControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}';
};

export type UserControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 用户不存在
   */
  404: unknown;
};

export type UserControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type UserControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}';
};

export type UserControllerFindOneResponses = {
  200: unknown;
};

export type UserControllerUpdateData = {
  body?: UpdateUserDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}';
};

export type UserControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 用户不存在
   */
  404: unknown;
};

export type UserControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type UserControllerGetProfileData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/profile';
};

export type UserControllerGetProfileErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerGetProfileResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      id: number;
      username: string;
      nickname: string;
      email: string;
      phone: string;
      status: string;
      banned: unknown;
      banReason: unknown;
      avatar: string;
      description: unknown;
      address: unknown;
      gender: string;
      birthDate: unknown;
      articleCount: number;
      followerCount: number;
      followingCount: number;
      level: number;
      experience: number;
      score: number;
      wallet: number;
      membershipLevel: number;
      membershipLevelName: string;
      membershipStatus: string;
      membershipStartDate: unknown;
      membershipEndDate: unknown;
      lastLoginAt: string;
      lastActiveAt: unknown;
      refreshToken: unknown;
      inviterId: unknown;
      inviteCode: string;
      inviteEarnings: string;
      inviteCount: number;
      roles: Array<{
        id?: number;
        name?: string;
        displayName?: unknown;
        description?: string;
        permissions?: Array<{
          id: number;
          name: string;
          description: string;
        }>;
        createdAt?: string;
        updatedAt?: string;
      }>;
      config: unknown;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type UserControllerGetProfileResponse =
  UserControllerGetProfileResponses[keyof UserControllerGetProfileResponses];

export type UserControllerGetFollowerCountData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}/followers/count';
};

export type UserControllerGetFollowerCountResponses = {
  200: unknown;
};

export type UserControllerGetFollowingCountData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}/followings/count';
};

export type UserControllerGetFollowingCountResponses = {
  200: unknown;
};

export type UserControllerGetFollowersData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/user/{id}/followers';
};

export type UserControllerGetFollowersResponses = {
  200: unknown;
};

export type UserControllerGetFollowingsData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/user/{id}/followings';
};

export type UserControllerGetFollowingsResponses = {
  200: unknown;
};

export type UserControllerGetUserCommissionConfigData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/commission/config';
};

export type UserControllerGetUserCommissionConfigErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerGetUserCommissionConfigResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type UserControllerSetUserCommissionConfigData = {
  body?: UserCommissionConfigDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/commission/config';
};

export type UserControllerSetUserCommissionConfigErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerSetUserCommissionConfigResponses = {
  /**
   * 设置成功
   */
  201: unknown;
};

export type UserControllerGetWalletData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/wallet';
};

export type UserControllerGetWalletErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerGetWalletResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type UserControllerLoginData = {
  body?: LoginDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/login';
};

export type UserControllerLoginErrors = {
  /**
   * 用户名或密码错误
   */
  401: unknown;
};

export type UserControllerLoginResponses = {
  /**
   * 登录成功，返回JWT token
   */
  201: {
    code: number;
    message: string;
    data: {
      id: number;
      username: string;
      nickname: string;
      email: string;
      phone: string;
      status: string;
      banned: unknown;
      banReason: unknown;
      avatar: string;
      description: unknown;
      address: unknown;
      gender: string;
      birthDate: unknown;
      articleCount: number;
      followerCount: number;
      followingCount: number;
      level: number;
      experience: number;
      score: number;
      wallet: number;
      membershipLevel: number;
      membershipLevelName: string;
      membershipStatus: string;
      membershipStartDate: unknown;
      membershipEndDate: unknown;
      lastLoginAt: string;
      lastActiveAt: unknown;
      refreshToken: string;
      inviterId: unknown;
      inviteCode: string;
      inviteEarnings: string;
      inviteCount: number;
      roles: Array<{
        id?: number;
        name?: string;
        displayName?: unknown;
        description?: string;
        permissions?: Array<{
          id: number;
          name: string;
          description: string;
        }>;
        createdAt?: string;
        updatedAt?: string;
      }>;
      createdAt: string;
      updatedAt: string;
      token: string;
    };
  };
};

export type UserControllerLoginResponse =
  UserControllerLoginResponses[keyof UserControllerLoginResponses];

export type UserControllerRegisterUserData = {
  body?: CreateUserDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/register';
};

export type UserControllerRegisterUserErrors = {
  /**
   * 请求参数不合法
   */
  400: unknown;
  /**
   * 用户不存在
   */
  404: unknown;
  /**
   * 用户名已存在
   */
  409: unknown;
};

export type UserControllerRegisterUserResponses = {
  /**
   * 注册成功，返回用户信息
   */
  201: {
    code: number;
    message: string;
    data: {
      id: number;
      username: string;
      nickname: string;
      email: string;
      phone: unknown;
      status: string;
      banned: unknown;
      banReason: unknown;
      avatar: string;
      description: unknown;
      address: unknown;
      gender: string;
      birthDate: unknown;
      articleCount: number;
      followerCount: number;
      followingCount: number;
      level: number;
      experience: number;
      score: number;
      wallet: number;
      membershipLevel: number;
      membershipLevelName: string;
      membershipStatus: string;
      membershipStartDate: unknown;
      membershipEndDate: unknown;
      lastLoginAt: unknown;
      lastActiveAt: unknown;
      refreshToken: string;
      inviterId: unknown;
      inviteCode: unknown;
      inviteEarnings: string;
      inviteCount: number;
      roles: Array<{
        id?: number;
        name?: string;
        displayName?: unknown;
        description?: string;
        permissions?: Array<{
          id: number;
          name: string;
          description: string;
        }>;
        createdAt?: string;
        updatedAt?: string;
      }>;
      createdAt: string;
      updatedAt: string;
      token: string;
    };
  };
};

export type UserControllerRegisterUserResponse =
  UserControllerRegisterUserResponses[keyof UserControllerRegisterUserResponses];

export type UserControllerRefreshTokenData = {
  body?: {
    refreshToken?: string;
  };
  headers?: {
    'Device-Id'?: string;
    Authorization?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/refresh-token';
};

export type UserControllerRefreshTokenResponses = {
  201: unknown;
};

export type UserControllerLogoutData = {
  body?: never;
  headers?: {
    'Device-Id'?: string;
    Authorization?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/logout';
};

export type UserControllerLogoutResponses = {
  201: unknown;
};

export type UserControllerFollowData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}/follow';
};

export type UserControllerFollowResponses = {
  201: unknown;
};

export type UserControllerUnfollowData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/user/{id}/unfollow';
};

export type UserControllerUnfollowResponses = {
  201: unknown;
};

export type UserControllerCalculateCommissionData = {
  body?: CalculateCommissionDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/commission/calculate';
};

export type UserControllerCalculateCommissionErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerCalculateCommissionResponses = {
  /**
   * 计算成功
   */
  200: unknown;
};

export type UserControllerRechargeWalletData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/wallet/recharge';
};

export type UserControllerRechargeWalletErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerRechargeWalletResponses = {
  /**
   * 充值成功
   */
  200: unknown;
};

export type UserControllerWithdrawWalletData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/wallet/withdraw';
};

export type UserControllerWithdrawWalletErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
};

export type UserControllerWithdrawWalletResponses = {
  /**
   * 提现成功
   */
  200: unknown;
};

export type UserControllerSendVerificationCodeData = {
  body?: SendMailDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/user/email/verification';
};

export type UserControllerSendVerificationCodeErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 请求过多
   */
  429: unknown;
};

export type UserControllerSendVerificationCodeResponses = {
  /**
   * 发送成功
   */
  200: unknown;
};

export type ArticleControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
    title?: string;
    /**
     * 分类
     */
    categoryId?: number;
    type?: 'all' | 'latest' | 'following' | 'popular';
  };
  url: '/article';
};

export type ArticleControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id: number;
        title: string;
        requireLogin?: boolean;
        requireFollow?: boolean;
        requirePayment?: boolean;
        viewPrice?: string;
        type?: string;
        content?: string;
        images?: string;
        summary?: string;
        views?: number;
        likes?: number;
        status?: string;
        cover?: string;
        authorId?: number;
        author?: {
          id: number;
          username: string;
          nickname: string;
          avatar: string;
          status: string;
          createdAt: string;
          updatedAt: string;
          description: unknown;
          followerCount: number;
          followingCount: number;
        };
        category?: {
          id: number;
          name: string;
          description: string;
          parentId: number;
          parent: {
            id: number;
            name: string;
            description: string;
            parentId: unknown;
            avatar: string;
            background: string;
            cover: string;
            sort: number;
            status: string;
            articleCount: number;
            followCount: number;
            createdAt: string;
            updatedAt: string;
          };
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          status: string;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        };
        tags?: Array<{
          id: number;
          name: string;
          description: string;
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        }>;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type ArticleControllerFindAllResponse =
  ArticleControllerFindAllResponses[keyof ArticleControllerFindAllResponses];

export type ArticleControllerCreateData = {
  body?: CreateArticleDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/article';
};

export type ArticleControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: unknown;
};

export type ArticleControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/article/{id}';
};

export type ArticleControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 文章不存在
   */
  404: unknown;
};

export type ArticleControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type ArticleControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/article/{id}';
};

export type ArticleControllerFindOneErrors = {
  /**
   * 文章不存在
   */
  404: unknown;
};

export type ArticleControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      id: number;
      title: string;
      requireLogin: boolean;
      requireFollow: boolean;
      requirePayment: boolean;
      viewPrice: string;
      type: string;
      content: string;
      images: string;
      summary: unknown;
      views: number;
      likes: number;
      status: string;
      cover: unknown;
      authorId: number;
      author: {
        id: number;
        username: string;
        nickname: string;
        avatar: string;
        status: string;
        createdAt: string;
        updatedAt: string;
        description: unknown;
        followerCount: number;
        followingCount: number;
      };
      category: {
        id: number;
        name: string;
        description: string;
        parentId: number;
        parent: {
          id: number;
          name: string;
          description: string;
          parentId: unknown;
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          status: string;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        };
        avatar: string;
        background: string;
        cover: string;
        sort: number;
        status: string;
        articleCount: number;
        followCount: number;
        createdAt: string;
        updatedAt: string;
      };
      tags: Array<{
        id: number;
        name: string;
        description: string;
        avatar: string;
        background: string;
        cover: string;
        sort: number;
        articleCount: number;
        followCount: number;
        createdAt: string;
        updatedAt: string;
      }>;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type ArticleControllerFindOneResponse =
  ArticleControllerFindOneResponses[keyof ArticleControllerFindOneResponses];

export type ArticleControllerUpdateData = {
  body?: UpdateArticleDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/article/{id}';
};

export type ArticleControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 文章不存在
   */
  404: unknown;
};

export type ArticleControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type ArticleControllerGetLikeStatusData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/article/{id}/like/status';
};

export type ArticleControllerGetLikeStatusErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 文章不存在
   */
  404: unknown;
};

export type ArticleControllerGetLikeStatusResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type ArticleControllerGetLikeCountData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/article/{id}/like/count';
};

export type ArticleControllerGetLikeCountErrors = {
  /**
   * 文章不存在
   */
  404: unknown;
};

export type ArticleControllerGetLikeCountResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type ArticleControllerArticleSearchData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query: {
    /**
     * 分页
     */
    page?: number;
    /**
     * 限制
     */
    limit?: number;
    keyword: string;
    categoryId?: number;
  };
  url: '/article/search';
};

export type ArticleControllerArticleSearchResponses = {
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id?: number;
        title?: string;
        requireLogin?: boolean;
        requireFollow?: boolean;
        requirePayment?: boolean;
        viewPrice?: string;
        type?: string;
        content?: string;
        images?: Array<string>;
        summary?: unknown;
        views?: number;
        likes?: number;
        status?: string;
        cover?: string;
        authorId?: number;
        author?: {
          id: number;
          username: string;
          nickname: string;
          avatar: string;
          status: string;
          createdAt: string;
          updatedAt: string;
          description: unknown;
          followerCount: number;
          followingCount: number;
        };
        category?: {
          id: number;
          name: string;
          description: string;
          parentId: number;
          parent: {
            id: number;
            name: string;
            description: string;
            parentId: unknown;
            avatar: string;
            background: string;
            cover: string;
            sort: number;
            status: string;
            articleCount: number;
            followCount: number;
            createdAt: string;
            updatedAt: string;
          };
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          status: string;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        };
        tags?: Array<{
          id: number;
          name: string;
          description: string;
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        }>;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type ArticleControllerArticleSearchResponse =
  ArticleControllerArticleSearchResponses[keyof ArticleControllerArticleSearchResponses];

export type ArticleControllerFindRecommendData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 文章id
     */
    id: string;
  };
  query?: never;
  url: '/article/recommend/{id}';
};

export type ArticleControllerFindRecommendResponses = {
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id?: number;
        title?: string;
        requireLogin?: boolean;
        requireFollow?: boolean;
        requirePayment?: boolean;
        viewPrice?: string;
        type?: string;
        content?: string;
        images?: Array<string>;
        summary?: unknown;
        views?: number;
        likes?: number;
        status?: string;
        cover?: string;
        authorId?: number;
        author?: {
          id: number;
          username: string;
          nickname: string;
          avatar: string;
          status: string;
          createdAt: string;
          updatedAt: string;
          description: unknown;
          followerCount: number;
          followingCount: number;
        };
        category?: {
          id: number;
          name: string;
          description: string;
          parentId: number;
          parent: {
            id: number;
            name: string;
            description: string;
            parentId: unknown;
            avatar: string;
            background: string;
            cover: string;
            sort: number;
            status: string;
            articleCount: number;
            followCount: number;
            createdAt: string;
            updatedAt: string;
          };
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          status: string;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        };
        tags?: Array<{
          id?: number;
          name?: string;
          description?: string;
          avatar?: string;
          background?: string;
          cover?: string;
          sort?: number;
          articleCount?: number;
          followCount?: number;
          createdAt?: string;
          updatedAt?: string;
        }>;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type ArticleControllerFindRecommendResponse =
  ArticleControllerFindRecommendResponses[keyof ArticleControllerFindRecommendResponses];

export type ArticleControllerFindArticleByAuthorData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 用户id
     */
    id: string;
  };
  query?: {
    /**
     * 分页
     */
    page?: number;
    /**
     * 限制
     */
    limit?: number;
    type?: 'all' | 'popular' | 'latest';
  };
  url: '/article/author/{id}';
};

export type ArticleControllerFindArticleByAuthorResponses = {
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id: number;
        title: string;
        requireLogin: boolean;
        requireFollow: boolean;
        requirePayment: boolean;
        viewPrice: string;
        type: string;
        content: string;
        images: Array<string>;
        summary: unknown;
        views: number;
        likes: number;
        status: string;
        cover: string;
        authorId: number;
        author: {
          id: number;
          username: string;
          nickname: string;
          avatar: string;
          status: string;
          createdAt: string;
          updatedAt: string;
          description: unknown;
          followerCount: number;
          followingCount: number;
        };
        category: {
          id: number;
          name: string;
          description: string;
          parentId: number;
          parent: {
            id: number;
            name: string;
            description: string;
            parentId: unknown;
            avatar: string;
            background: string;
            cover: string;
            sort: number;
            status: string;
            articleCount: number;
            followCount: number;
            createdAt: string;
            updatedAt: string;
          };
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          status: string;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        };
        tags: Array<{
          id: number;
          name: string;
          description: string;
          avatar: string;
          background: string;
          cover: string;
          sort: number;
          articleCount: number;
          followCount: number;
          createdAt: string;
          updatedAt: string;
        }>;
        createdAt: string;
        updatedAt: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type ArticleControllerFindArticleByAuthorResponse =
  ArticleControllerFindArticleByAuthorResponses[keyof ArticleControllerFindArticleByAuthorResponses];

export type ArticleControllerLikeData = {
  body?: ArticleLikeDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/article/{id}/like';
};

export type ArticleControllerLikeErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 文章不存在
   */
  404: unknown;
};

export type ArticleControllerLikeResponses = {
  /**
   * 操作成功
   */
  200: unknown;
};

export type CommentControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 文章ID
     */
    id: number;
  };
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/comments/article/{id}';
};

export type CommentControllerFindAllErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 文章不存在
   */
  404: unknown;
};

export type CommentControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type CommentControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 评论ID
     */
    id: number;
  };
  query?: never;
  url: '/comments/{id}';
};

export type CommentControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 评论不存在
   */
  404: unknown;
};

export type CommentControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: BaseResponseDto;
};

export type CommentControllerRemoveResponse =
  CommentControllerRemoveResponses[keyof CommentControllerRemoveResponses];

export type CommentControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 评论ID
     */
    id: number;
  };
  query?: {
    /**
     * 子评论页码
     */
    repliesPage?: number;
    /**
     * 每页子评论数量
     */
    repliesLimit?: number;
  };
  url: '/comments/{id}';
};

export type CommentControllerFindOneErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 评论不存在
   */
  404: unknown;
};

export type CommentControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type CommentControllerUpdateData = {
  body?: UpdateCommentDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 评论ID
     */
    id: number;
  };
  query?: never;
  url: '/comments/{id}';
};

export type CommentControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 评论不存在
   */
  404: unknown;
};

export type CommentControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type CommentControllerGetRepliesData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 父评论ID
     */
    id: number;
  };
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/comments/{id}/replies';
};

export type CommentControllerGetRepliesErrors = {
  /**
   * 父评论不存在
   */
  404: unknown;
};

export type CommentControllerGetRepliesResponses = {
  /**
   * 获取成功
   */
  200: PaginatedResponseDto;
};

export type CommentControllerGetRepliesResponse =
  CommentControllerGetRepliesResponses[keyof CommentControllerGetRepliesResponses];

export type CommentControllerGetUserCommentsData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 用户ID
     */
    userId: number;
  };
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/comments/user/{userId}';
};

export type CommentControllerGetUserCommentsResponses = {
  /**
   * 获取成功
   */
  200: PaginatedResponseDto;
};

export type CommentControllerGetUserCommentsResponse =
  CommentControllerGetUserCommentsResponses[keyof CommentControllerGetUserCommentsResponses];

export type CommentControllerGetCommentCountData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 文章ID
     */
    id: number;
  };
  query?: never;
  url: '/comments/article/{id}/count';
};

export type CommentControllerGetCommentCountResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type CommentControllerLikeData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 评论ID
     */
    id: number;
  };
  query?: never;
  url: '/comments/{id}/like';
};

export type CommentControllerLikeErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 评论不存在
   */
  404: unknown;
};

export type CommentControllerLikeResponses = {
  /**
   * 点赞成功
   */
  200: unknown;
};

export type CommentControllerCreateData = {
  body?: CreateCommentDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/comments';
};

export type CommentControllerCreateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 文章或父评论不存在
   */
  404: unknown;
};

export type CommentControllerCreateResponses = {
  /**
   * 评论创建成功
   */
  201: unknown;
};

export type TagControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/tag';
};

export type TagControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id?: number;
        name?: string;
        description?: string;
        avatar?: string;
        background?: string;
        cover?: string;
        sort?: number;
        articleCount?: number;
        followCount?: number;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type TagControllerFindAllResponse =
  TagControllerFindAllResponses[keyof TagControllerFindAllResponses];

export type TagControllerCreateData = {
  body?: CreateTagDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/tag';
};

export type TagControllerCreateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type TagControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: {
    code: number;
    message: string;
    data: {
      id: number;
      name: string;
      description: string;
      avatar: string;
      background: string;
      cover: string;
      sort: number;
      articleCount: number;
      followCount: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type TagControllerCreateResponse =
  TagControllerCreateResponses[keyof TagControllerCreateResponses];

export type TagControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/tag/{id}';
};

export type TagControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 标签不存在
   */
  404: unknown;
};

export type TagControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type TagControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/tag/{id}';
};

export type TagControllerFindOneErrors = {
  /**
   * 标签不存在
   */
  404: unknown;
};

export type TagControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      id: number;
      name: string;
      description: string;
      avatar: string;
      background: string;
      cover: string;
      sort: number;
      articleCount: number;
      followCount: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type TagControllerFindOneResponse =
  TagControllerFindOneResponses[keyof TagControllerFindOneResponses];

export type TagControllerUpdateData = {
  body?: UpdateTagDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/tag/{id}';
};

export type TagControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 标签不存在
   */
  404: unknown;
};

export type TagControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type TagControllerUnfollowData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/tag/{id}/follow';
};

export type TagControllerUnfollowErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 标签不存在
   */
  404: unknown;
};

export type TagControllerUnfollowResponses = {
  /**
   * 取消关注成功
   */
  200: unknown;
};

export type TagControllerFollowData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/tag/{id}/follow';
};

export type TagControllerFollowErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 标签不存在
   */
  404: unknown;
};

export type TagControllerFollowResponses = {
  /**
   * 关注成功
   */
  200: unknown;
};

export type CategoryControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
    /**
     * 分类名
     */
    name?: string;
    /**
     * 状态
     */
    status?: string;
    /**
     * 主分类ID
     */
    parentId?: number;
  };
  url: '/category';
};

export type CategoryControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id?: number;
        name?: string;
        description?: string;
        parentId?: number;
        children?: Array<{
          id?: number;
          name?: string;
          description?: string;
          parentId?: number;
          avatar?: string;
          background?: string;
          cover?: string;
          sort?: number;
          status?: string;
          articleCount?: number;
          followCount?: number;
          createdAt?: string;
          updatedAt?: string;
        }>;
        avatar?: string;
        background?: string;
        cover?: string;
        sort?: number;
        status?: string;
        articleCount?: number;
        followCount?: number;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type CategoryControllerFindAllResponse =
  CategoryControllerFindAllResponses[keyof CategoryControllerFindAllResponses];

export type CategoryControllerCreateData = {
  body?: CreateCategoryDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/category';
};

export type CategoryControllerCreateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type CategoryControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: unknown;
};

export type CategoryControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/category/{id}';
};

export type CategoryControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 分类不存在
   */
  404: unknown;
};

export type CategoryControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type CategoryControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/category/{id}';
};

export type CategoryControllerFindOneErrors = {
  /**
   * 分类不存在
   */
  404: unknown;
};

export type CategoryControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: {
    code: number;
    message: string;
    data: {
      id: number;
      name: string;
      description: string;
      parentId: number;
      children: Array<{
        id?: number;
        name?: string;
        description?: string;
        parentId?: number;
        avatar?: string;
        background?: string;
        cover?: string;
        sort?: number;
        status?: string;
        articleCount?: number;
        followCount?: number;
        createdAt?: string;
        updatedAt?: string;
      }>;
      avatar: string;
      background: string;
      cover: string;
      sort: number;
      status: string;
      articleCount: number;
      followCount: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type CategoryControllerFindOneResponse =
  CategoryControllerFindOneResponses[keyof CategoryControllerFindOneResponses];

export type CategoryControllerUpdateData = {
  body?: UpdateCategoryDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/category/{id}';
};

export type CategoryControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 分类不存在
   */
  404: unknown;
};

export type CategoryControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: unknown;
};

export type PermissionControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/permission';
};

export type PermissionControllerFindAllErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type PermissionControllerFindAllResponses = {
  /**
   * 获取成功
   */
  200: Array<Permission>;
};

export type PermissionControllerFindAllResponse =
  PermissionControllerFindAllResponses[keyof PermissionControllerFindAllResponses];

export type PermissionControllerCreateData = {
  body?: CreatePermissionDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/permission';
};

export type PermissionControllerCreateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
};

export type PermissionControllerCreateResponses = {
  /**
   * 创建成功
   */
  201: Permission;
};

export type PermissionControllerCreateResponse =
  PermissionControllerCreateResponses[keyof PermissionControllerCreateResponses];

export type PermissionControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/permission/{id}';
};

export type PermissionControllerRemoveErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 权限不存在
   */
  404: unknown;
};

export type PermissionControllerRemoveResponses = {
  /**
   * 删除成功
   */
  200: unknown;
};

export type PermissionControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/permission/{id}';
};

export type PermissionControllerFindOneErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 权限不存在
   */
  404: unknown;
};

export type PermissionControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: Permission;
};

export type PermissionControllerFindOneResponse =
  PermissionControllerFindOneResponses[keyof PermissionControllerFindOneResponses];

export type PermissionControllerUpdateData = {
  body?: UpdatePermissionDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/permission/{id}';
};

export type PermissionControllerUpdateErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 权限不存在
   */
  404: unknown;
};

export type PermissionControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: Permission;
};

export type PermissionControllerUpdateResponse =
  PermissionControllerUpdateResponses[keyof PermissionControllerUpdateResponses];

export type OrderControllerGetUserOrdersData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query: {
    page: string;
    limit: string;
  };
  url: '/order/list';
};

export type OrderControllerGetUserOrdersResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type OrderControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/order/{id}';
};

export type OrderControllerFindOneErrors = {
  /**
   * 订单不存在
   */
  404: unknown;
};

export type OrderControllerFindOneResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type OrderControllerFindByOrderNoData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    orderNo: string;
  };
  query?: never;
  url: '/order/no/{orderNo}';
};

export type OrderControllerFindByOrderNoErrors = {
  /**
   * 订单不存在
   */
  404: unknown;
};

export type OrderControllerFindByOrderNoResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type OrderControllerGetWalletBalanceData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/order/wallet/balance';
};

export type OrderControllerGetWalletBalanceErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type OrderControllerGetWalletBalanceResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type OrderControllerCreateOrderData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/order';
};

export type OrderControllerCreateOrderErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
};

export type OrderControllerCreateOrderResponses = {
  /**
   * 创建成功
   */
  201: {
    code: number;
    message: string;
    data: {
      order: {
        id: number;
        userId: number;
        authorId: string;
        orderNo: string;
        type: string;
        title: string;
        amount: string;
        paymentMethod: string;
        paymentOrderNo: unknown;
        status: string;
        paidAt: unknown;
        remark: unknown;
        createdAt: string;
        updatedAt: string;
      };
      commission: {
        authorAmount: number;
        inviterAmount: number;
        platformAmount: number;
        authorRate: number;
        inviterRate: number;
        platformRate: number;
        customCommission: {
          author: boolean;
          inviter: boolean;
        };
      };
    };
  };
};

export type OrderControllerCreateOrderResponse =
  OrderControllerCreateOrderResponses[keyof OrderControllerCreateOrderResponses];

export type InviteControllerGetMyInvitesData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/invite/my';
};

export type InviteControllerGetMyInvitesErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type InviteControllerGetMyInvitesResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type InviteControllerGetInviteStatsData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/invite/stats';
};

export type InviteControllerGetInviteStatsErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type InviteControllerGetInviteStatsResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type InviteControllerGetMyInviteEarningsData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/invite/earnings';
};

export type InviteControllerGetMyInviteEarningsErrors = {
  /**
   * 未授权
   */
  401: unknown;
};

export type InviteControllerGetMyInviteEarningsResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type InviteControllerGetInviteDetailData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/invite/{id}';
};

export type InviteControllerGetInviteDetailErrors = {
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 邀请记录不存在
   */
  404: unknown;
};

export type InviteControllerGetInviteDetailResponses = {
  /**
   * 获取成功
   */
  200: unknown;
};

export type InviteControllerUseInviteData = {
  body?: UseInviteDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/invite/use';
};

export type InviteControllerUseInviteErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
  /**
   * 邀请码不存在
   */
  404: unknown;
  /**
   * 邀请码已使用
   */
  409: unknown;
};

export type InviteControllerUseInviteResponses = {
  /**
   * 邀请码使用成功
   */
  200: unknown;
};

export type InviteControllerCreateInviteData = {
  body?: CreateInviteDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/invite';
};

export type InviteControllerCreateInviteErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 未授权
   */
  401: unknown;
};

export type InviteControllerCreateInviteResponses = {
  /**
   * 邀请码创建成功
   */
  201: unknown;
};

export type UploadControllerGetFileInfoData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 文件ID
     */
    id: string;
  };
  query?: never;
  url: '/upload/info/{id}';
};

export type UploadControllerGetFileInfoErrors = {
  /**
   * 文件不存在
   */
  404: unknown;
};

export type UploadControllerGetFileInfoResponses = {
  /**
   * 获取文件信息成功
   */
  200: Upload;
};

export type UploadControllerGetFileInfoResponse =
  UploadControllerGetFileInfoResponses[keyof UploadControllerGetFileInfoResponses];

export type UploadControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/upload';
};

export type UploadControllerFindAllResponses = {
  /**
   * 获取所有上传文件成功
   */
  200: Array<Upload>;
};

export type UploadControllerFindAllResponse =
  UploadControllerFindAllResponses[keyof UploadControllerFindAllResponses];

export type UploadControllerUploadFileData = {
  body?: {
    files?: Blob | File;
  };
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/upload/file';
};

export type UploadControllerUploadFileErrors = {
  /**
   * 请求参数错误
   */
  400: unknown;
  /**
   * 权限不足
   */
  403: unknown;
  /**
   * 服务器错误
   */
  500: unknown;
};

export type UploadControllerUploadFileResponses = {
  /**
   * 上传文件成功
   */
  201: {
    code: number;
    message: string;
    data: Array<{
      id?: number;
      hash?: string;
      originalName?: string;
      storage?: string;
      filename?: string;
      path?: string;
      url?: string;
      size?: number;
      mimeType?: string;
      referenceCount?: number;
      createdAt?: string;
      updatedAt?: string;
    }>;
  };
};

export type UploadControllerUploadFileResponse =
  UploadControllerUploadFileResponses[keyof UploadControllerUploadFileResponses];

export type UploadControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 文件ID
     */
    id: string;
  };
  query?: never;
  url: '/upload/{id}';
};

export type UploadControllerRemoveErrors = {
  /**
   * 删除文件失败
   */
  400: unknown;
  /**
   * 未授权
   */
  403: unknown;
  /**
   * 文件不存在
   */
  404: unknown;
  /**
   * 服务器错误
   */
  500: unknown;
};

export type UploadControllerRemoveResponses = {
  /**
   * 删除文件成功
   */
  200: unknown;
};

export type MessageControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
  };
  url: '/message';
};

export type MessageControllerFindAllResponses = {
  200: unknown;
};

export type MessageControllerCreateData = {
  body?: CreateMessageDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/message';
};

export type MessageControllerCreateResponses = {
  201: unknown;
};

export type MessageControllerRemoveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 消息ID
     */
    id: string;
  };
  query?: never;
  url: '/message/{id}';
};

export type MessageControllerRemoveResponses = {
  200: unknown;
};

export type MessageControllerFindOneData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 消息ID
     */
    id: string;
  };
  query?: never;
  url: '/message/{id}';
};

export type MessageControllerFindOneResponses = {
  200: unknown;
};

export type MessageControllerUpdateData = {
  body?: UpdateMessageDto;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 消息ID
     */
    id: string;
  };
  query?: never;
  url: '/message/{id}';
};

export type MessageControllerUpdateResponses = {
  200: unknown;
};

export type MessageControllerMarkAsReadData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * 消息ID
     */
    id: string;
  };
  query?: never;
  url: '/message/{id}/read';
};

export type MessageControllerMarkAsReadResponses = {
  201: unknown;
};

export type BannersControllerFindAllData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: {
    /**
     * 分页
     */
    page?: number;
    /**
     * 限制
     */
    limit?: number;
  };
  url: '/banners';
};

export type BannersControllerFindAllResponses = {
  200: {
    code: number;
    message: string;
    data: {
      data: Array<{
        id?: number;
        title?: string;
        description?: string;
        imageUrl?: string;
        linkUrl?: string;
        sortOrder?: number;
        status?: string;
        createdAt?: string;
        updatedAt?: string;
      }>;
      meta: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
      };
    };
  };
};

export type BannersControllerFindAllResponse =
  BannersControllerFindAllResponses[keyof BannersControllerFindAllResponses];

export type BannersControllerCreateData = {
  body?: {
    title: string;
    description?: string;
    imageUrl: string;
    linkUrl?: string;
    sortOrder?: number;
    status?: 'active' | 'inactive';
  };
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/banners';
};

export type BannersControllerCreateResponses = {
  200: {
    [key: string]: unknown;
  };
};

export type BannersControllerCreateResponse =
  BannersControllerCreateResponses[keyof BannersControllerCreateResponses];

export type BannersControllerFindActiveData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/banners/active';
};

export type BannersControllerFindActiveResponses = {
  200: {
    code: number;
    message: string;
    data: Array<{
      id?: number;
      title?: string;
      description?: string;
      imageUrl?: string;
      linkUrl?: string;
      sortOrder?: number;
      status?: string;
      createdAt?: string;
      updatedAt?: string;
    }>;
  };
};

export type BannersControllerFindActiveResponse =
  BannersControllerFindActiveResponses[keyof BannersControllerFindActiveResponses];

export type BannersControllerDeleteByIdData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * id
     */
    id: string;
  };
  query?: never;
  url: '/banners/{id}';
};

export type BannersControllerDeleteByIdResponses = {
  200: {
    [key: string]: unknown;
  };
};

export type BannersControllerDeleteByIdResponse =
  BannersControllerDeleteByIdResponses[keyof BannersControllerDeleteByIdResponses];

export type BannersControllerDetailData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    /**
     * id
     */
    id: string;
  };
  query?: never;
  url: '/banners/{id}';
};

export type BannersControllerDetailResponses = {
  200: {
    code: number;
    message: string;
    data: {
      id: number;
      title: string;
      description: string;
      imageUrl: string;
      linkUrl: string;
      sortOrder: number;
      status: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type BannersControllerDetailResponse =
  BannersControllerDetailResponses[keyof BannersControllerDetailResponses];

export type BannersControllerUpdateData = {
  body?: {
    title: string;
    description?: string;
    imageUrl: string;
    linkUrl?: string;
    sortOrder?: number;
    /**
     * 状态
     */
    status?: 'inactive' | 'active';
  };
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/banners/{id}';
};

export type BannersControllerUpdateResponses = {
  200: {
    [key: string]: unknown;
  };
};

export type BannersControllerUpdateResponse =
  BannersControllerUpdateResponses[keyof BannersControllerUpdateResponses];

export type PostPayCreateData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/pay/create';
};

export type PostPayCreateResponses = {
  200: {
    [key: string]: unknown;
  };
};

export type PostPayCreateResponse = PostPayCreateResponses[keyof PostPayCreateResponses];

export type GetPayOrderStatusData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path?: never;
  query?: never;
  url: '/pay/orderStatus';
};

export type GetPayOrderStatusResponses = {
  200: {
    [key: string]: unknown;
  };
};

export type GetPayOrderStatusResponse =
  GetPayOrderStatusResponses[keyof GetPayOrderStatusResponses];

export type PostPayNotifyByPaywayData = {
  body?: never;
  headers?: {
    Authorization?: string;
    'Device-Id'?: string;
    'Device-Name'?: string;
    'Device-Type'?: string;
  };
  path: {
    payway: string;
  };
  query?: never;
  url: '/pay/notify/{payway}';
};

export type PostPayNotifyByPaywayResponses = {
  200: {
    [key: string]: unknown;
  };
};

export type PostPayNotifyByPaywayResponse =
  PostPayNotifyByPaywayResponses[keyof PostPayNotifyByPaywayResponses];

export type ClientOptions = {
  baseURL: string;
};
